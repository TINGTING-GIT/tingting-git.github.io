<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2022/07/13/SpringCloud/"/>
      <url>/2022/07/13/SpringCloud/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="微服务架构概述"><a href="#微服务架构概述" class="headerlink" title="微服务架构概述"></a>微服务架构概述</h2><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.——James Lewis and </p><p>Martin Fowler (2014)</p></blockquote><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具本业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。<br><strong>主题词01：现代数字化生活-落地维度</strong></p><p>手机<br>PC<br>智能家居<br>…<br><strong>主题词02：分布式微服务架构-落地维度</strong></p><p>满足哪些维度？支撑起这些维度的具体技术？</p><p><img src="/2022/07/13/SpringCloud/fa69e6841ce850672a3ec9cf8f4acad8.png" alt="img"></p><ul><li>服务调用服务降级服务注册与发现服务熔断负载均衡服务消息队列服务网关配置中心管理自动化构建部署服务监控全链路追踪服务定时任务调度操作</li></ul><h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h3><p>是什么？符合微服务技术维度</p><p>SpringCloud&#x3D;分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><p>猜猜SpringCloud这个大集合里有多少种技术?</p><p><img src="/2022/07/13/SpringCloud/eeb48f15799b978e45ed980172c9f06e.png" alt="img"></p><p>SpringCloud俨然已成为微服务开发的主流技术栈，在国内开发者社区非常火爆。</p><p>“微”力十足，互联网大厂微服务架构案例：</p><p>京东的：</p><p><img src="/2022/07/13/SpringCloud/2b9f44abea91af3c4b77c1c77eae6eb3.png" alt="京东的"></p><p>阿里的：</p><p><img src="/2022/07/13/SpringCloud/ef6092b03932cb7f6f4b7e20ff370261.png" alt="阿里的"></p><p>京东物流的：</p><p><img src="/2022/07/13/SpringCloud/b7f15e802845e6ecdc4c13e2685789c1.png" alt="京东物流"></p><p><img src="/2022/07/13/SpringCloud/60b96a66ac3b4dceda8f7ac2f8d8d79e.png" alt="微服务的简单概括"></p><p>Spring Cloud技术栈：</p><p><img src="/2022/07/13/SpringCloud/fa347f3da197c3df86bf5d36961c8cde.png" alt="netflix"></p><p><img src="/2022/07/13/SpringCloud/1657698172433.png" alt="1657698172433"></p><p>总结</p><p><img src="/2022/07/13/SpringCloud/fc8ed10fca5f7cc56e4d4623a39245eb.png" alt="img"></p><p><img src="/2022/07/13/SpringCloud/735076e24e1096e38b0ee8ef50f08a17.png" alt="img"></p><h2 id="第二季Boot和Cloud版本选型"><a href="#第二季Boot和Cloud版本选型" class="headerlink" title="第二季Boot和Cloud版本选型"></a>第二季Boot和Cloud版本选型</h2><ul><li><p>Spring Boot 2.X 版</p><ul><li></li><li></li><li><p>通过上面官网发现，Boot官方强烈建议你升级到2.X以上版本</p></li></ul></li><li><p>Spring Cloud H版</p><ul><li></li><li></li></ul></li><li><p>Spring Boot 与 Spring Cloud 兼容性查看</p><ul><li></li><li></li></ul></li><li><p>接下来开发用到的组件版本</p><ul><li>Cloud - Hoxton.SR1</li><li>Boot - 2.2.2.RELEASE</li><li>Cloud Alibaba - 2.1.0.RELEASE</li><li>Java - Java 8</li><li>Maven - 3.5及以上</li><li>MySQL - 5.7及以上</li></ul></li></ul><h2 id="Cloud组件停更说明"><a href="#Cloud组件停更说明" class="headerlink" title="Cloud组件停更说明"></a>Cloud组件停更说明</h2><ul><li><p>停更引发的“升级惨案”</p><ul><li>停更不停用</li><li>被动修复bugs</li><li>不再接受合并请求</li><li>不再发布新版本</li><li>Cloud升级</li></ul></li><li><p>服务注册中心</p><ul><li>× Eureka</li><li>√ Zookeeper</li><li>√ Consul</li><li>√ Nacos</li></ul></li><li><p>服务调用</p><ul><li>√ Ribbon</li><li>√ LoadBalancer</li></ul></li><li><p>服务调用2</p><ul><li>× Feign</li><li>√ OpenFeign</li></ul></li><li><p>服务降级</p><ul><li>× Hystrix</li><li>√ resilience4j</li><li>√ sentienl</li></ul></li><li><p>服务网关</p><ul><li>× Zuul</li><li>! Zuul2</li><li>√ gateway</li></ul></li><li><p>服务配置</p><ul><li>× Config</li><li>√ Nacos</li></ul></li><li><p>服务总线</p><ul><li>× Bus</li><li>√ Nacos</li></ul></li></ul><p>[Spring]: <a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/</a>“Spring Cloud官方文档”<br>[Spring]: <a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a>“Spring Cloud中文文档”<br>[Spring]: <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/</a>“Spring Boot官方文档”</p><h2 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h2><h3 id="父工程Project空间新建"><a href="#父工程Project空间新建" class="headerlink" title="父工程Project空间新建"></a>父工程Project空间新建</h3><p>约定 &gt; 配置 &gt; 编码</p><p>创建微服务cloud整体聚合父工程Project，有8个关键步骤：</p><ul><li>New Project - maven工程 - create from archetype: maven-archetype-site</li><li>聚合总父工程名字</li><li>Maven选版本</li><li>工程名字</li><li>字符编码 - Settings - File encoding</li><li>注解生效激活 - Settings - Annotation Processors</li><li>Java编译版本选8</li><li>File Type过滤 - Settings - File Type</li></ul><h3 id="pom文件设置"><a href="#pom文件设置" class="headerlink" title="pom文件设置"></a>pom文件设置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">  &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;SpringCloud_demo1&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;&lt;!-- 这里添加，注意不是jar或war --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 统一管理jar包版本 --&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;<span class="number">1.8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;<span class="number">1.8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;junit.version&gt;<span class="number">4.12</span>&lt;/junit.version&gt;</span><br><span class="line">    &lt;log4j.version&gt;<span class="number">1.2</span><span class="number">.17</span>&lt;/log4j.version&gt;</span><br><span class="line">    &lt;lombok.version&gt;<span class="number">1.18</span><span class="number">.24</span>&lt;/lombok.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;<span class="number">8.0</span><span class="number">.29</span>&lt;/mysql.version&gt;</span><br><span class="line">    &lt;druid.version&gt;<span class="number">1.1</span><span class="number">.12</span>&lt;/druid.version&gt;</span><br><span class="line">    &lt;mybatis.spring.boot.version&gt;<span class="number">2.2</span><span class="number">.2</span>&lt;/mybatis.spring.boot.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 子模块继承之后，提供作用：</span><br><span class="line">      锁定版本+子modlue不用写groupId和version --&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;!--spring boot <span class="number">2.2</span><span class="number">.2</span>--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.2</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--spring cloud Hoxton.SR1--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;Hoxton.SR1&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--spring cloud alibaba <span class="number">2.1</span><span class="number">.0</span>.RELEASE--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">        &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mybatis.spring.boot.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">  &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;fork&gt;<span class="literal">true</span>&lt;/fork&gt;</span><br><span class="line">          &lt;addResources&gt;<span class="literal">true</span>&lt;/addResources&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="复习DependencyManagement和Dependencies"><a href="#复习DependencyManagement和Dependencies" class="headerlink" title="复习DependencyManagement和Dependencies"></a>复习DependencyManagement和Dependencies</h3><p>Maven使用dependencyManagement元素来提供了一种管理依赖版本号的方式。通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement元素。</p><p>使用pom.xml中的dependencyManagement元素能让所有在子项目中引用个依赖而不用显式的列出版本量。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用这个dependencyManagement元素中指定的版本号。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysq1&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.1</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>然后在子项目里就可以添加mysql-connector时可以不指定版本号，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysq1&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version就可。</p><ul><li>dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。</li><li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项,并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom。</li><li>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li></ul><p>IDEA右侧旁的Maven插件有Toggle ‘ Skip Tests’ Mode按钮，这样maven可以跳过单元测试</p><p>父工程创建完成执行mvn : install将父工程发布到仓库方便子工程继承。</p><h3 id="支付模块构建-上"><a href="#支付模块构建-上" class="headerlink" title="支付模块构建(上)"></a>支付模块构建(上)</h3><p>创建微服务模块套路：</p><ol><li>建Module</li><li>改POM</li><li>写YML</li><li>主启动</li><li>业务类</li></ol><p><img src="/2022/07/13/SpringCloud/1657713300963.png" alt="1657713300963"></p><p>创建cloud-provider-payment8001微服务提供者支付Module模块：</p><h4 id="1-建名为cloud-provider-payment8001的Maven工程"><a href="#1-建名为cloud-provider-payment8001的Maven工程" class="headerlink" title="1.建名为cloud-provider-payment8001的Maven工程"></a>1.建名为cloud-provider-payment8001的Maven工程</h4><h4 id="2-改POM"><a href="#2-改POM" class="headerlink" title="2.改POM"></a>2.改POM</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;SpringCloud_demo1&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.1</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mysql-connector-java--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--jdbc--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="3-写YML"><a href="#3-写YML" class="headerlink" title="3.写YML"></a>3.写YML</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8001</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver           # mysql驱动包</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/springcloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.hua.springcloud.entities    # 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><h4 id="4-主启动"><a href="#4-主启动" class="headerlink" title="4.主启动"></a>4.主启动</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付模块构建-中"><a href="#支付模块构建-中" class="headerlink" title="支付模块构建(中)"></a>支付模块构建(中)</h3><h4 id="5-业务类"><a href="#5-业务类" class="headerlink" title="5.业务类"></a>5.业务类</h4><p>SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment`(</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    `serial` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br></pre></td></tr></table></figure><p>Entities：</p><p>实体类Payment：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JSON封装体CommonResult：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span>  String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAO：</p><p>接口PaymentDao：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis映射文件PaymentMapper.xml，路径：resources&#x2F;mapper&#x2F;PaymentMapper.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.hua.springcloud.dao.PaymentDao&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">&quot;create&quot;</span> parameterType=<span class="string">&quot;Payment&quot;</span> useGeneratedKeys=<span class="string">&quot;true&quot;</span> keyProperty=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">payment</span><span class="params">(serial)</span>  values(#&#123;serial&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;BaseResultMap&quot;</span> type=<span class="string">&quot;com.hua.springcloud.entities.Payment&quot;</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span> jdbcType=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span><br><span class="line">        &lt;id column=<span class="string">&quot;serial&quot;</span> property=<span class="string">&quot;serial&quot;</span> jdbcType=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getPaymentById&quot;</span> parameterType=<span class="string">&quot;Long&quot;</span> resultMap=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span><br><span class="line">        select * from payment where id=#&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>Service：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类PaymentServiceImpl:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(Payment payment)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;————插入结果：&quot;</span>+result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;插入数据成功&quot;</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;插入数据失败&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">paymentById</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;————插入结果：&quot;</span>+paymentById);</span><br><span class="line">        <span class="keyword">if</span> (paymentById != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;查询数据成功&quot;</span>,paymentById);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;没有对应记录，查询ID：&quot;</span>+id,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付模块构建-下"><a href="#支付模块构建-下" class="headerlink" title="支付模块构建(下)"></a>支付模块构建(下)</h3><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p>浏览器 - <a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a><br>Postman - <a href="http://localhost:8001/payment/create?serial=yong">http://localhost:8001/payment/create?serial=yong</a></p><h4 id="7-小总结"><a href="#7-小总结" class="headerlink" title="7.小总结"></a>7.小总结</h4><p>创建微服务模块套路：</p><ul><li>建Module</li><li>改POM</li><li>写YML</li><li>主启动</li><li>业务类</li></ul><h3 id="热部署Devtools"><a href="#热部署Devtools" class="headerlink" title="热部署Devtools"></a>热部署Devtools</h3><p><strong>开发时使用，生产环境关闭</strong></p><h4 id="1-Adding-devtools-to-your-project"><a href="#1-Adding-devtools-to-your-project" class="headerlink" title="1.Adding devtools to your project"></a>1.Adding devtools to your project</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-Adding-plugin-to-your-pom-xml"><a href="#2-Adding-plugin-to-your-pom-xml" class="headerlink" title="2.Adding plugin to your pom.xml"></a>2.Adding plugin to your pom.xml</h4><p>下段配置复制到聚合父类总工程的pom.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;finalName&gt;你的工程名&lt;/finalName&gt;（单一工程时添加）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;fork&gt;<span class="literal">true</span>&lt;/fork&gt;</span><br><span class="line">          &lt;addResources&gt;<span class="literal">true</span>&lt;/addResources&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h4 id="3-Enabling-automatic-build"><a href="#3-Enabling-automatic-build" class="headerlink" title="3.Enabling automatic build"></a>3.Enabling automatic build</h4><p>File -&gt; Settings(New Project Settings-&gt;Settings for New Projects) -&gt;Complier</p><p>下面项勾选</p><ul><li>Automatically show first error in editor</li><li>Display notification on build completion</li><li>Build project automatically</li><li>Compile independent modules in parallel</li></ul><h4 id="4-Update-the-value-of"><a href="#4-Update-the-value-of" class="headerlink" title="4.Update the value of"></a>4.Update the value of</h4><p>键入Ctrl + Shift + Alt + &#x2F; ，打开Registry，勾选：</p><ul><li><p>compiler.automake.allow.when.app.running</p></li><li><p>actionSystem.assertFocusAccessFromEdt</p></li></ul><p>勾选该选项，idea2021版本无compiler.automake.allow.when.app.running，我们需要多做下面一步设置</p><p>settings→advanced settings 勾选下图内容，与勾选compiler.automake.allow.when.app.running是等价的。</p><h4 id="5-重启IDEA"><a href="#5-重启IDEA" class="headerlink" title="5.重启IDEA"></a>5.重启IDEA</h4><h3 id="消费者订单模块-上"><a href="#消费者订单模块-上" class="headerlink" title="消费者订单模块(上)"></a>消费者订单模块(上)</h3><h4 id="1-建Module"><a href="#1-建Module" class="headerlink" title="1.建Module"></a>1.建Module</h4><p>创建名为cloud-consumer-order80的maven工程。</p><h4 id="2-改POM-1"><a href="#2-改POM-1" class="headerlink" title="2.改POM"></a>2.改POM</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;SpringCloud_demo1&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-consumer-order80&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="3-写YML-1"><a href="#3-写YML-1" class="headerlink" title="3.写YML"></a>3.写YML</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="4-主启动-1"><a href="#4-主启动-1" class="headerlink" title="4.主启动"></a>4.主启动</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-业务类-1"><a href="#5-业务类-1" class="headerlink" title="5.业务类"></a>5.业务类</h4><p>实体类：同支付模块一样直接复制即可</p><p>配置类：</p><p><strong>RestTemplate</strong></p><p>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集。</p><p>[官网地址]: <a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a>“官网地址”</p><p>使用：</p><ul><li>使用restTemplate访问restful接口非常的简单粗暴无脑。</li><li>(url, requestMap, ResponseBean.class)这三个参数分别代表。</li><li>REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.hua.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">create</span><span class="params">(Payment payment)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-测试-1"><a href="#6-测试-1" class="headerlink" title="6.测试"></a>6.测试</h4><p>运行cloud-consumer-order80与cloud-provider-payment8001两工程</p><p>浏览器 -<a href="http://localhost//consumer/payment/get/1">http://localhost//consumer/payment/get/1</a></p><h3 id="消费者订单模块-下"><a href="#消费者订单模块-下" class="headerlink" title="消费者订单模块(下)"></a>消费者订单模块(下)</h3><p>浏览器 - <a href="http://localhost///consumer/payment/create?serial=pw">http://localhost///consumer/payment/create?serial=pw</a></p><p>虽然，返回成功，但是在数据库中，并没有数据。</p><p>解决之道：在loud-provider-payment8001工程的PaymentController中添加@RequestBody注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要RequestBody：当我们使⽤post请求的时候，我们会将参数放在requestbody中，加上@RequestBody⽤来接受到前端传过来的requestbody</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span><span class="comment">/*添加到这里*/</span> Payment payment)</span>&#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改idea的workspace.xml的方式来快速打开Run Dashboard窗口（这个用来显示哪些Spring Boot工程运行，停止等信息。我idea 2022.1版本在名为Services窗口就可以显示哪些Spring Boot工程运行，停止等信息出来）。</p><p>开启Run DashBoard</p><ul><li><p>打开工程路径下的.idea文件夹的workspace.xml</p></li><li><p>在<component name="RunDashboard">中修改或添加以下代码：</component></p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;option name=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;option value=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span>/&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/option&gt;</span><br></pre></td></tr></table></figure><ul><li>没有<component name="RunDashboard">，直接添加</component></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;component name=<span class="string">&quot;RunDashboard&quot;</span>&gt;</span><br><span class="line">    &lt;option name=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span><br><span class="line">      &lt;set&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span><br><span class="line">      &lt;/set&gt;</span><br><span class="line">    &lt;/option&gt;</span><br><span class="line">    &lt;option name=<span class="string">&quot;ruleStates&quot;</span>&gt;</span><br><span class="line">      &lt;list&gt;</span><br><span class="line">        &lt;RuleState&gt;</span><br><span class="line">          &lt;option name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;ConfigurationTypeDashboardGroupingRule&quot;</span> /&gt;</span><br><span class="line">        &lt;/RuleState&gt;</span><br><span class="line">        &lt;RuleState&gt;</span><br><span class="line">          &lt;option name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;StatusDashboardGroupingRule&quot;</span> /&gt;</span><br><span class="line">        &lt;/RuleState&gt;</span><br><span class="line">      &lt;/list&gt;</span><br><span class="line">    &lt;/option&gt;</span><br><span class="line">  &lt;/component&gt;</span><br></pre></td></tr></table></figure><p>由于idea版本差异，可能需要关闭重启，后在server可操作。</p><h3 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h3><p>观察cloud-consumer-order80与cloud-provider-payment8001两工程有重复代码（entities包下的实体），重构。</p><p>1.新建 cloud-api-commons 工程</p><p>2.POM</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;SpringCloud_demo1&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>3.entities</p><ul><li>将cloud-consumer-order80与cloud-provider-payment8001两工程的公有entities包移至cloud-api-commons工程下。</li></ul><p>4.maven clean、install cloud-api-commons工程，以供给cloud-consumer-order80与cloud-provider-payment8001两工程调用。</p><p>5.订单80和支付8001分别改造。</p><ul><li><p>将cloud-consumer-order80与cloud-provider-payment8001两工程的公有entities包移除。</p></li><li><p>引入cloud-api-commons依赖。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;&lt;!--引入自定义的api通用包，可以使Payment支付Entity--&gt;</span><br><span class="line">    &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><p>6.测试</p><h2 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h2><h3 id="Eureka基础知识"><a href="#Eureka基础知识" class="headerlink" title="Eureka基础知识"></a>Eureka基础知识</h3><h4 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h4><p>Spring Cloud封装了Netflix 公司开发的Eureka模块来实现服务治理</p><p>在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><h4 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h4><p>Eureka采用了CS的设计架构，Eureka Sever作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何RPC远程框架中，都会有一个注册中心存放服务地址相关信息(接口地址)。</p><p><img src="/2022/07/13/SpringCloud/3956561052b9dc3909f16f1ff26d01bb.png" alt="img"></p><h4 id="Eureka包含两个组件-Eureka-Server和Eureka-Client"><a href="#Eureka包含两个组件-Eureka-Server和Eureka-Client" class="headerlink" title="Eureka包含两个组件:Eureka Server和Eureka Client"></a>Eureka包含两个组件:Eureka Server和Eureka Client</h4><p><strong>Eureka Server提供服务注册服务</strong></p><p>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><p><strong>EurekaClient通过注册中心进行访问</strong></p><p>它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒)</p><h3 id="单机Eureka构建步骤"><a href="#单机Eureka构建步骤" class="headerlink" title="单机Eureka构建步骤"></a>单机Eureka构建步骤</h3><h4 id="IDEA生成eurekaServer端服务注册中心，类似物业公司"><a href="#IDEA生成eurekaServer端服务注册中心，类似物业公司" class="headerlink" title="IDEA生成eurekaServer端服务注册中心，类似物业公司"></a>IDEA生成eurekaServer端服务注册中心，类似物业公司</h4><p>1.创建名为cloud-eureka-server7001的Maven工程</p><p>2.修改pom.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;SpringCloud_demo1&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-eureka-server7001&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--eureka-server--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.hua.study&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--boot web actuator--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--一般通用配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>3.添加application.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7001</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    #<span class="literal">false</span>表示不向注册中心注册自己。</span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    #<span class="literal">false</span>表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    service-url:</span><br><span class="line">      #设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br><span class="line">      defaultZone: http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>4.主启动</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">/*表示为服务注册中心Eureka Server*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurkaMain7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurkaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.测试运行EurekaMain7001，浏览器输入<a href="http://localhost:7001/%E5%9B%9E%E8%BD%A6%EF%BC%8C%E4%BC%9A%E6%9F%A5%E7%9C%8B%E5%88%B0Spring">http://localhost:7001/回车，会查看到Spring</a> Eureka服务主页。</p><h4 id="EurekaClient端将注册进EurekaServer成为服务提供者provider"><a href="#EurekaClient端将注册进EurekaServer成为服务提供者provider" class="headerlink" title="EurekaClient端将注册进EurekaServer成为服务提供者provider"></a>EurekaClient端将注册进EurekaServer成为服务提供者provider</h4><h5 id="EurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似学校对外提供授课服务。"><a href="#EurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似学校对外提供授课服务。" class="headerlink" title="EurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似学校对外提供授课服务。"></a>EurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似学校对外提供授课服务。</h5><p>1.修改cloud-provider-payment8001</p><p>2.改POM</p><p>添加spring-cloud-starter-netflix-eureka-client依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.在YML添加</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进Eurekaserver默认为<span class="literal">true</span>。</span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为<span class="literal">true</span>。单节点无所谓，集群必须设置为<span class="literal">true</span>才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>4.主启动</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span><span class="comment">//&lt;-----添加该注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8001</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.测试</p><p>启动cloud-provider-payment8001和cloud-eureka-server7001工程。</p><p>浏览器输入 - <a href="http://localhost:7001/">http://localhost:7001/</a> 主页内的Instances currently registered with Eureka会显示cloud-provider-payment8001的配置文件application.yml设置的应用名cloud-payment-service</p><p><img src="/2022/07/13/SpringCloud/1657784966960.png" alt="1657784966960"><br>6.自我保护机制</p><p>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARELESSER THAN THRESHOLD AND HENCFT ARE NOT BEING EXPIRED JUST TO BE SAFE.</p><p>紧急情况！EUREKA可能错误地声称实例在没有启动的情况下启动了。续订小于阈值，因此实例不会为了安全而过期。</p><h5 id="EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer-类似来尚硅谷上课消费的各位同学"><a href="#EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer-类似来尚硅谷上课消费的各位同学" class="headerlink" title="EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer,类似来尚硅谷上课消费的各位同学"></a>EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer,类似来尚硅谷上课消费的各位同学</h5><p>1.修改cloud-consumer-order80</p><p>2.POM</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.YML</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-order-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进Eurekaserver默认为<span class="literal">true</span>。</span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为<span class="literal">true</span>。单节点无所谓，集群必须设置为<span class="literal">true</span>才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>4.主启动</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span><span class="comment">//&lt;--- 添加该标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.测试</p><p>启动cloud-provider-payment8001、cloud-eureka-server7001和cloud-consumer-order80这三工程。<br>浏览器输入 <a href="http://localhost:7001/">http://localhost:7001</a> , 在主页的Instances currently registered with Eureka将会看到cloud-provider-payment8001、cloud-consumer-order80两个工程名。</p><p><img src="/2022/07/13/SpringCloud/1657785306915.png" alt="1657785306915">注意，application.yml配置中层次缩进和空格，两者不能少，否则，会抛出异常Failed to bind properties under ‘eureka.client.service-url’ to java.util.Map &lt;java.lang.String, java.lang.String&gt;。</p><h3 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h3><h4 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h4><p><img src="/2022/07/13/SpringCloud/14570c4b7c4dd8653be6211da2675e45.png" alt="img"></p><p>服务注册：将服务信息注册进注册中心</p><p>服务发现：从注册中心上获取服务信息</p><p>实质：存key服务命取value闭用地址</p><ol><li>先启动eureka注主册中心</li><li>启动服务提供者payment支付服务</li><li>支付服务启动后会把自身信息(比服务地址L以别名方式注朋进eureka</li><li>消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址</li><li>消去者导调用地址后，底屋实际是利用HttpClient技术实现远程调用</li><li>消费者获得服务地址后会缓存在本地jvm内存中，默认每间隔30秒更新—次服务调用地址</li></ol><p><strong>问题:微服务RPC远程服务调用最核心的是什么</strong><br><strong>高可用</strong>，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。</p><p><strong>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。</strong></p><p><strong>互相注册，相互守望。</strong></p><h4 id="EurekaServer集群环境构建步骤"><a href="#EurekaServer集群环境构建步骤" class="headerlink" title="EurekaServer集群环境构建步骤"></a>EurekaServer集群环境构建步骤</h4><ul><li>创建cloud-eureka-server7002工程，和cloud-eureka-server7001创建步骤一样</li></ul><p><img src="/2022/07/13/SpringCloud/1657785931933.png" alt="1657785931933"></p><ul><li><p>找到C:\Windows\System32\drivers\etc路径下的hosts文件，修改映射配置添加进hosts文件</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br></pre></td></tr></table></figure></li><li><p>修改cloud-eureka-server7001配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7001</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    #<span class="literal">false</span>表示不向注册中心注册自己。</span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    #<span class="literal">false</span>表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    service-url:</span><br><span class="line">      #设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br><span class="line">      defaultZone: http:<span class="comment">//eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>修改cloud-eureka-server7002配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7002</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7002.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    #<span class="literal">false</span>表示不向注册中心注册自己。</span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    #<span class="literal">false</span>表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    service-url:</span><br><span class="line">      #设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br><span class="line">      defaultZone: http:<span class="comment">//eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li></ul><p>测试-  <a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a></p><p><img src="/2022/07/13/SpringCloud/1657786756137.png" alt="1657786756137"></p><h4 id="将微服务发布到Eureka集群配置中"><a href="#将微服务发布到Eureka集群配置中" class="headerlink" title="将微服务发布到Eureka集群配置中"></a>将微服务发布到Eureka集群配置中</h4><ul><li><p>将支付服务8001微服务发布到上面2台Eureka集群配置中</p></li><li><p>将8001的配置文件的eureka.client.service-url.defaultZone进行修改</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进Eurekaserver默认为<span class="literal">true</span>。</span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为<span class="literal">true</span>。单节点无所谓，集群必须设置为<span class="literal">true</span>才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">#      defaultZone: http:<span class="comment">//localhost:7001/eureka</span></span><br><span class="line">       defaultZone: http:<span class="comment">//eureka7001.com:7001/eureka, http://eureka7002.com:7002/eureka #集群版</span></span><br></pre></td></tr></table></figure><ul><li><p>将订单服务80微服务发布到上面2台Eureka集群配置中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进Eurekaserver默认为<span class="literal">true</span>。</span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为<span class="literal">true</span>。单节点无所谓，集群必须设置为<span class="literal">true</span>才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line"> #     defaultZone: http:<span class="comment">//localhost:7001/eureka</span></span><br><span class="line">      defaultZone: http:<span class="comment">//eureka7001.com:7001/eureka, http://eureka7002.com:7002/eureka #集群版</span></span><br></pre></td></tr></table></figure></li></ul><p>测试01</p><ul><li>先要启动EurekaServer，7001&#x2F;7002服务</li><li>再要启动服务提供者provider，8001</li><li>再要启动消费者，80</li><li>浏览器输入 - <a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></li></ul><h4 id="支付服务提供者8001集群环境构建"><a href="#支付服务提供者8001集群环境构建" class="headerlink" title="支付服务提供者8001集群环境构建"></a>支付服务提供者8001集群环境构建</h4><p>参考cloud-provicer-payment8001</p><p>1.新建cloud-provider-payment8002</p><p>2.改POM</p><p>3.写YML - 端口8002</p><p>4.主启动</p><p>5.业务类</p><p>6.修改8001&amp;8002的Controller，添加serverPort</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;<span class="comment">//读取到yml文件的port</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;————插入结果：&quot;</span>+result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;插入数据成功:&quot;</span>+serverPort,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;插入数据失败&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">paymentById</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;————插入结果：&quot;</span>+paymentById);</span><br><span class="line">        <span class="keyword">if</span> (paymentById != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;查询数据成功:&quot;</span>+serverPort,paymentById);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;没有对应记录，查询ID：&quot;</span>+id,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡</p><p>cloud-consumer-order80订单服务访问地址不能写死</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Config中使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContextBean - 提前说一下Ribbon的负载均衡功能</p><p>测试</p><p>先要启动EurekaServer，7001&#x2F;7002服务</p><p>再要启动服务提供者provider，8001&#x2F;8002服务</p><p>浏览器输入 - <a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p>结果：负载均衡效果达到，8001&#x2F;8002端口交替出现</p><p>Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能。</p><p>相互注册，相互守望</p><p><img src="/2022/07/13/SpringCloud/94c4c3eca8c2f9eb7497fe643b9b0622.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2022/07/07/redis/"/>
      <url>/2022/07/07/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h2><h3 id="技术的发展"><a href="#技术的发展" class="headerlink" title="技术的发展"></a>技术的发展</h3><p><img src="/2022/07/07/redis/1657174853444.jpg" alt="1657174853444"></p><h4 id="解决CPU和内存"><a href="#解决CPU和内存" class="headerlink" title="解决CPU和内存"></a>解决CPU和内存</h4><p><img src="/2022/07/07/redis/1657175933991.jpg" alt="1657175933991"></p><h4 id="减少IO压力"><a href="#减少IO压力" class="headerlink" title="减少IO压力"></a>减少IO压力</h4><p><img src="/2022/07/07/redis/1657176255948.jpg" alt="1657176255948"></p><h3 id="NoSQL数据库概述"><a href="#NoSQL数据库概述" class="headerlink" title="NoSQL数据库概述"></a>NoSQL数据库概述</h3><p><img src="/2022/07/07/redis/1657176449654.jpg" alt="1657176449654"></p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><h3 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h3><h4 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h4><p><img src="/2022/07/07/redis/1657176764334.jpg" alt="1657176764334"></p><h4 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h4><p><img src="/2022/07/07/redis/1657176817643.jpg" alt="1657176817643"></p><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p><img src="/2022/07/07/redis/1657176860593.jpg" alt="1657176860593"></p><h3 id="行式存储数据库（大数据时代）"><a href="#行式存储数据库（大数据时代）" class="headerlink" title="行式存储数据库（大数据时代）"></a>行式存储数据库（大数据时代）</h3><h4 id="行式数据库"><a href="#行式数据库" class="headerlink" title="行式数据库"></a>行式数据库</h4><p><img src="/2022/07/07/redis/1657177074951.jpg" alt="1657177074951"></p><h4 id="列式数据库"><a href="#列式数据库" class="headerlink" title="列式数据库"></a>列式数据库</h4><p><img src="/2022/07/07/redis/1657177121445.jpg" alt="1657177121445"></p><h2 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h2><h3 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h3><ul><li>Redis 是一个开源的 key-value 存储系统。</li><li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。</li><li>这些数据类型都支持 push&#x2F;pop、add&#x2F;remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li><li>在此基础上，Redis 支持各种不同方式的排序。</li><li>与 memcached 一样，为了保证效率，数据都是缓存在内存中。</li><li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li><li>并且在此基础上实现了 master-slave (主从) 同步。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="配合关系型数据库做高速缓存"><a href="#配合关系型数据库做高速缓存" class="headerlink" title="配合关系型数据库做高速缓存"></a>配合关系型数据库做高速缓存</h4><ul><li><p>高频次，热门访问的数据，降低数据库 IO。</p></li><li><p>分布式架构，做 session 共享。</p><p><img src="/2022/07/07/redis/image-20210618160003509.jpg" alt="image-20210618160003509"></p></li></ul><h4 id="多样的数据结构存储持久化数据"><a href="#多样的数据结构存储持久化数据" class="headerlink" title="多样的数据结构存储持久化数据"></a>多样的数据结构存储持久化数据</h4><p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160101040.jpg" alt="image-20210618160101040"></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>官网下载Redis压缩包</p></li><li><p>复制到Linux系统中（如CenOS7）</p></li><li><p><img src="/2022/07/07/redis/1657178006389.jpg" alt="1657178006389"></p></li><li><p>下载gcc编译环境（yum install gcc）</p></li><li><p>加入文件，用make命令进行编译</p><ul><li><p>发生以下错误：检查gcc是否安装成功（gcc –version）；make distclean；make。</p><p><img src="/2022/07/07/redis/1657178265646.jpg" alt="1657178265646"></p></li></ul></li><li><p>make install进行安装，安装目录为&#x2F;usr&#x2F;local&#x2F;bin</p><p><img src="/2022/07/07/redis/1657178967469.jpg" alt="1657178967469"></p></li><li><p><img src="/2022/07/07/redis/1657179060240.jpg" alt="1657179060240"></p></li></ul><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><h4 id="前台启动（不推荐）"><a href="#前台启动（不推荐）" class="headerlink" title="前台启动（不推荐）"></a>前台启动（不推荐）</h4><ul><li><p>redis-server命令（界面不能进行其他操作，不能关闭）</p><p><img src="/2022/07/07/redis/1657179347546.jpg" alt="1657179347546"></p></li></ul><h4 id="后台启动（推荐）"><a href="#后台启动（推荐）" class="headerlink" title="后台启动（推荐）"></a>后台启动（推荐）</h4><ul><li><p>进入redis目录，拷贝redis.conf到etc中</p><p><img src="/2022/07/07/redis/1657179826095.jpg" alt="1657179826095"></p></li><li><p>在etc文件中进入redis.conf将后台启动设置daemonize no改为yes（vi redis.conf；esc+&#x2F;进行查找；i键进行修改；shift+: wq!保存退出）</p></li><li><p>进入&#x2F;usr&#x2F;local&#x2F;bin下运行redis-server &#x2F;etc&#x2F;redis.conf</p><p><img src="/2022/07/07/redis/1657180827921.jpg" alt="1657180827921"></p></li><li><p>ps -ef | grep redis查看端口为127.0.0.1:6379</p><p><img src="/2022/07/07/redis/1657180934974.jpg" alt="1657180934974"></p></li><li><p><img src="/2022/07/07/redis/1657181083173.jpg" alt="1657181083173"></p></li><li><p><img src="/2022/07/07/redis/1657181192969.jpg" alt="1657181192969"></p></li></ul><h3 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h3><p><img src="/2022/07/07/redis/1657181475933.jpg" alt="1657181475933"></p><h4 id="Redis-使用的是单线程-多路-IO-复用技术："><a href="#Redis-使用的是单线程-多路-IO-复用技术：" class="headerlink" title="Redis 使用的是单线程 + 多路 IO 复用技术："></a>Redis 使用的是单线程 + 多路 IO 复用技术：</h4><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p><p><img src="/2022/07/07/redis/1657182139417.jpg" alt="1657182139417"></p><p>** 串行 vs 多线程 + 锁（memcached） vs 单线程 + 多路 IO 复用 (Redis)**（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用） 。</p><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><h3 id="Redis键（key）"><a href="#Redis键（key）" class="headerlink" title="Redis键（key）"></a>Redis键（key）</h3><ul><li>keys * 查看当前库所有key（匹配：key *1）</li><li>exists key 判断某个key是否存在</li><li>type key 查看你的key是什么类型</li><li>del key 删除指定的key数据</li><li>unlink key 根据value选择非阻塞删除（仅将key从keyspace元数据中删除，真正的删除会在后续异步操作）</li><li>expire key 10 10秒钟：为给点的key设置过期时间</li><li>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</li><li>select命令切换数据库</li><li>dbsize查看当前数据库的key的数量</li><li>flushdb清空当前库</li><li>flushall通杀全部库</li></ul><h3 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串 (String)"></a>Redis 字符串 (String)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>String 是 Redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p></li><li><p>String 类型是二进制安全的。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。</p></li><li><p>String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 512M。</p></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>set key value 添加键值对mset key value key value  同时设置多个值</p><p><img src="/2022/07/07/redis/1657183465154.jpg" alt="1657183465154"></p></li><li><p>get key 查看key的值     mget key key  同时获取多个值</p></li><li><p>append key value 追加内容</p></li><li><p>strlen key 获取长度</p></li><li><p>setnx key value  只有key不存在时，才添加数据     setnx key value key value</p></li><li><p>incr key 储存的数字加一</p></li><li><p>decr key 储存的数字减一</p></li><li><p>incrby（原子性）&#x2F;decrby key 长度  储存的数字加上长度</p></li><li><p>getrange key 起始位置 结束位置   获取范围内的值</p></li><li><p>setrange key 起始位置 value 覆盖从起始位置开始的值</p></li><li><p>setex key 过期时间 value  设置值同时设置过期时间</p></li><li><p>getset key value  设置新值同时获得旧值</p></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>String 的数据结构为简单动态字符串 (Simple Dynamic String, 缩写 SDS)，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p><img src="/2022/07/07/redis/1657185047661.jpg" alt="1657185047661"></p><p>如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p><h3 id="Redis-列表（List"><a href="#Redis-列表（List" class="headerlink" title="Redis 列表（List)"></a>Redis 列表（List)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>单键多值：Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="/2022/07/07/redis/1657185177487.jpg" alt="1657185177487"></p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>lpush&#x2F;rpush key value value   从左边或右边插入多个值</li><li>lpop&#x2F;rpop key   从左边或右边吐出一个值（值在键在，值完键亡）</li><li>rpoplpush key key 从key1列表右边吐出一个值，插入到key2列表的左边</li><li>lrange key start stop  按照索引下标获得元素（从左到右，0(左边第一个) -1(右边第一个)表示取所有值）</li><li>lindex key index 按照索引下标获取元素（从左到右）</li><li>llen key 获取列表长度</li><li>linsert key before&#x2F;after value newvalue  在value的之前&#x2F;之后加入新值</li><li>lrem key n value 从左边删除n个value值</li><li>lset key index value  将列表key下标为index的值替换为value</li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>List 的数据结构为快速链表 quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成 quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p><p><img src="/2022/07/07/redis/1657186636918.jpg" alt="1657186636918"><br>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="Redis-集合（Set）"><a href="#Redis-集合（Set）" class="headerlink" title="Redis 集合（Set）"></a>Redis 集合（Set）</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>Redis set 对外提供的功能与 list 类似，是一个列表的功能，特殊之处在于 set 是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p><p>Redis 的 Set 是 string 类型的无序集合。它底层其实是一个 value 为 null 的 hash 表，所以添加，删除，查找的 ** 复杂度都是 O (1)**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是 O (1)，数据增加，查找数据的时间不变。</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>sadd key value value  添加元素(member)，重复元素只添加一次</li><li>smembers key 取出该集合的所有值</li><li>sismember key value 判断集合key是否含有该value值</li><li>scard key 返回集合元素个数</li><li>srem key value value 删除元素</li><li>spop key 随机吐出一个值</li><li>srandmember key n 随机取出n个值，不会删除</li><li>smove source destination value  把source集合中的一个值移动到另一个destination 集合</li><li>sinter key key  返回俩个集合的交集元素</li><li>sunion key key 返回俩个集合的并集元素</li><li>sdiff key1 key2 返回俩个集合的差集元素（key1中的，不包含key2中的）</li></ul><h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><p>Set 数据结构是 dict 字典，字典是用哈希表实现的。<br>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p><h3 id="Redis-哈希（Hash）"><a href="#Redis-哈希（Hash）" class="headerlink" title="Redis 哈希（Hash）"></a>Redis 哈希（Hash）</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><ul><li><p>Redis hash 是一个键值对集合。</p></li><li><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。类似 Java 里面的 Map&lt;String,Object&gt;。</p></li><li><p>用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用普通的 key&#x2F;value 结构来存储，主要有以下 2 种存储方式：</p><p><img src="/2022/07/07/redis/1657196329468.jpg" alt="1657196329468"></p><ul><li>​方法一：每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</li></ul><p><img src="/2022/07/07/redis/image-20210618203434868-1657195804960.jpg" alt="image-20210618203434868"></p><ul><li>​方法二：用户 ID 数据冗余。</li></ul><p><img src="/2022/07/07/redis/image-20210618203449210-1657195851309.jpg" alt="image-20210618203449210"></p><p>通过 key (用户 ID) + field (属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题。</p><p><img src="/2022/07/07/redis/image-20210618203718979.jpg" alt="image-20210618203718979"></p></li></ul><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>hset key field value 给field赋值value</li><li>hget key1 field 从集合中取field的value</li><li>hmset key1 field1 value1 field2 value2  批量设置hash的值</li><li>hexists key1 field 查看哈希表key中，field是否存在</li><li>hkeys key 所有的field</li><li>hvals key 所有的value</li><li>hincrby key field increment 为哈希表key中的field的值加上增量 increment </li><li>hsetnx key field value 当field不存在时，将哈希表key中的域field值设置为value</li></ul><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><p>Hash 类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p><h3 id="Redis-有序集合-Zset（Sorted-set）"><a href="#Redis-有序集合-Zset（Sorted-set）" class="headerlink" title="Redis 有序集合 Zset（Sorted set）"></a>Redis 有序集合 Zset（Sorted set）</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><ul><li><p>Redis 有序集合 zset 与普通集合 set 非常相似，是一个没有重复元素的字符串集合。</p></li><li><p>不同之处是有序集合的每个成员都关联了一个评分（score），这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p></li><li><p>因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p></li><li><p>访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复成员的智能列表。</p></li></ul><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>zadd key score value score value  添加数据</p></li><li><p>zrange key start stop [WITHSCORES]   返回下标在start，stop之间的元素，带WITHSCORES让分数和值一起返回</p></li><li><p>zrangebyscore key min max [WITHSCORES] [limit offset count]  返回min和max之间的值，按score值递增排序（从小到大）</p></li><li><p>zrevrangebyscore key max min [withscores] [limit offset count]  同上，改为从大到小排序</p></li><li><p>zincrby key increment value  为value的score加上增量increment</p></li><li><p>zrem key value 删除指定value</p></li><li><p>acount key min max  统计该集合区间内元素个数</p></li><li><p>zrank key value 返回该值在集合中的排名，从0开始</p><p><img src="/2022/07/07/redis/1657198860494.jpg" alt="1657198860494"></p></li></ul><h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><p>SortedSet (zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据结构 Map&lt;String, Double&gt;，可以给每一个元素 value 赋予一个权重 score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</p><p>zset 底层使用了两个数据结构：</p><ul><li><p>hash，hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。</p></li><li><p>跳跃表，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</p></li></ul><h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis 采用的是跳跃表，跳跃表效率堪比红黑树，实现远比红黑树简单。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>对比有序链表和跳跃表，从链表中查询出 51：</p><ul><li><p>有序链表</p><p><img src="/2022/07/07/redis/image-20210618205641992.jpg" alt="image-20210618205641992"></p><p> 要查找值为 51 的元素，需要从第一个元素开始依次查找、比较才能找到。共需要 6 次比较。</p></li><li><p>跳跃表</p><p><img src="/2022/07/07/redis/image-20210618205920332.jpg" alt="image-20210618205920332"></p><ul><li>从第 2 层开始，1 节点比 51 节点小，向后比较；</li><li>21 节点比 51 节点小，继续向后比较，后面就是 NULL 了，所以从 21 节点向下到第 1 层；</li><li>在第 1 层，41 节点比 51 节点小，继续向后，61 节点比 51 节点大，所以从 41 向下；</li><li>在第 0 层，51 节点为要查找的节点，节点被找到，共查找 4 次。</li></ul></li></ul><p>从此可以看出跳跃表比有序链表效率要高。</p><h3 id="Redis-Bitmaps"><a href="#Redis-Bitmaps" class="headerlink" title="Redis Bitmaps"></a>Redis Bitmaps</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><img src="/2022/07/07/redis/1657262513534.jpg" alt="1657262513534"></p><p>Redis 提供了 Bitmaps 这个 “数据类型” 可以实现对位的操作：</p><ul><li><p>Bitmaps 本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p></li><li><p>Bitmaps 单独提供了一套命令， 所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。 可以把 Bitmaps 想象成一个以位为单位的数组， 数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做偏移量。</p><p><img src="/2022/07/07/redis/1657262396741.jpg" alt="1657262396741"></p></li></ul><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li><p>setbit key offset value  设置BItmaps中某个偏移量offset的值（0或1）</p><p><img src="/2022/07/07/redis/1657262674768.jpg" alt="1657262674768"></p></li><li><p>gitbit key offset  获取BItmaps中某个偏移量的值</p></li><li><p>btcount key [start  end]  统计start到end之间字符串设置为1的bit数（-1表示最后一位，-2表示倒数第二位）</p><p><img src="/2022/07/07/redis/1657263227467.jpg" alt="1657263227467"></p></li><li><p>bittop and(or&#x2F;not&#x2F;xor) destkey [key…]   将多个Bitmaps的and（交集）、or（并集）、not（非）、xor（异或）操作结果保存在destkey中</p></li></ul><h4 id="Bitmaps-与-set-对比"><a href="#Bitmaps-与-set-对比" class="headerlink" title="Bitmaps 与 set 对比"></a>Bitmaps 与 set 对比</h4><p>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和 Bitmaps 分别存储活跃用户可以得到表：</p><table><thead><tr><th>set 和 Bitmaps 存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个用户 id 占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合</td><td>64位</td><td>50000000</td><td>64 位 * 50000000 &#x3D; 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1 位 * 100000000 &#x3D; 12.5MB</td></tr></tbody></table><p>很明显， 这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的。</p><table><thead><tr><th>set 和 Bitmaps 存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但 Bitmaps 并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有 10 万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用 Bitmaps 就不太合适了， 因为基本上大部分位都是 0。</p><table><thead><tr><th>set 和 Bitmaps 存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个 userid 占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合</td><td>64 位</td><td>100000</td><td>64 位 * 100000 &#x3D; 800KB</td></tr><tr><td>Bitmaps</td><td>1 位</td><td>100000000</td><td>1 位 * 100000000 &#x3D; 12.5MB</td></tr></tbody></table><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量），可以使用 Redis 的 incr、incrby 轻松实现。但像 UV（UniqueVisitor 独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><ul><li><p>数据存储在 MySQL 表中，使用 distinct count 计算不重复个数。</p></li><li><p>使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理。</p></li></ul><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis 推出了 HyperLogLog。</p><ul><li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是：在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p></li><li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></li><li><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ul><p>什么是基数？</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}，那么这个数据集的基数集为 {1, 3, 5 ,7, 8}，基数个数(不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><ul><li>pfadd key element [element…]   添加元素到HYperLogLog中</li><li>pfcount key [key…]  计算HLL的基数数量，可以计算多个HLL，如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</li><li>pfmerge destkey sourcekey [sourcekey]   将一个或多个HLL合并后的结果存储在另一个HLL（destkey ）中</li></ul><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的 2 维坐标，在地图上就是经纬度。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p><h4 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h4><ul><li>geoadd key longitude latitude member [longitude latitude member]   添加地理位置（经度，纬度，名称）</li><li>geopos key member [member…]     获取地区的坐标值</li><li>geodist key member1 member2 [m|km|ft（英尺）|mi（英里）]  获取两个位置之间的直线距离（默认为米）</li><li>georadius key longitude(经度) latitude(纬度) radius m|km|ft|mi    以给点的经纬度为中心，找出某一半径内的元素</li></ul><h2 id="Redis配置文件介绍"><a href="#Redis配置文件介绍" class="headerlink" title="Redis配置文件介绍"></a>Redis配置文件介绍</h2><h3 id="Units单位"><a href="#Units单位" class="headerlink" title="Units单位"></a>Units单位</h3><p>配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit，大小写不敏感</p><h3 id="Includes包含"><a href="#Includes包含" class="headerlink" title="Includes包含"></a>Includes包含</h3><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><h3 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h3><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>默认情况bind&#x3D;127.0.0.1只能接受本机的访问请求</p><p>不写的情况下，无限制接受任何ip地址的访问</p><h4 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h4><p>本机访问保护模式设置no，支持远程访问</p><p>如果开启了protected-mode（yes），那么在没有设定bind ip且没有设密码的情况下，Redis只接受本机的访问</p><h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>端口号，默认为6379</p><h4 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h4><p>默认为511。</p><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和&#x3D;未完成三次握手队列+已经完成三次握手队列。</p><p>在高并发环境下需要一个高backlog值来避免慢客服端连接问题。</p><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h4><p>默认为0（永不超时）。</p><h4 id="tcp-keepalive"><a href="#tcp-keepalive" class="headerlink" title="tcp-keepalive"></a>tcp-keepalive</h4><p>默认为300。检测心跳。</p><h3 id="GENERAL通用"><a href="#GENERAL通用" class="headerlink" title="GENERAL通用"></a>GENERAL通用</h3><h4 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h4><p>是否为后台程序</p><h4 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h4><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p><h4 id="loglevel"><a href="#loglevel" class="headerlink" title="loglevel"></a>loglevel</h4><p>日志级别：debug，verbose，notice，warning</p><h4 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a>logfile</h4><p>日志输出路径</p><h4 id="databases-16"><a href="#databases-16" class="headerlink" title="databases 16"></a>databases 16</h4><p>设定库的数量默认16，默认数据库为0</p><h3 id="SECURITY安全"><a href="#SECURITY安全" class="headerlink" title="SECURITY安全"></a>SECURITY安全</h3><h4 id="设置密码（requirepass）"><a href="#设置密码（requirepass）" class="headerlink" title="设置密码（requirepass）"></a>设置密码（requirepass）</h4><p>访问密码的查看（config get requirepass）、设置和取消。</p><p>在命令中设置密码（config set requirepass “123456” ，auth 123456），只是临时的，重启redis服务器，密码就还原了。</p><p>永久设置，需要在配置文件中设置</p><h3 id="LIMITS限制"><a href="#LIMITS限制" class="headerlink" title="LIMITS限制"></a>LIMITS限制</h3><h4 id="maxclients"><a href="#maxclients" class="headerlink" title="maxclients"></a>maxclients</h4><p>设置redis同时可以与多少个客服端进行连接。</p><p>默认为10000个客服端。</p><h4 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a>maxmemory</h4><p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-pokicy来指定。</p><h4 id="maxmemory-samples"><a href="#maxmemory-samples" class="headerlink" title="maxmemory-samples"></a>maxmemory-samples</h4><p>设置样本数量。</p><p>一般设置3到7的数字，数值越小样本越不准确，但性能消耗较小。</p><h2 id="Redis-的发布和订阅"><a href="#Redis-的发布和订阅" class="headerlink" title="Redis 的发布和订阅"></a>Redis 的发布和订阅</h2><h3 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h3><ul><li><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p></li><li><p>Redis 客户端可以订阅任意数量的频道。</p></li></ul><h3 id="Redis-的发布和订阅-1"><a href="#Redis-的发布和订阅-1" class="headerlink" title="Redis 的发布和订阅"></a>Redis 的发布和订阅</h3><ul><li><p>客户端可以订阅频道如下图：</p><p><img src="/2022/07/07/redis/image-20210618211300027-1657261647170.jpg" alt="image-20210618211300027"></p></li><li><p>当给这个频道发布消息后，消息就会发送给订阅的客户端：</p><p><img src="/2022/07/07/redis/image-20210618211401669.jpg" alt="image-20210618211401669"></p></li></ul><h3 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h3><ul><li><p>打开一个客户端订阅 channel1：</p><p><img src="/2022/07/07/redis/image-20210618211907299.jpg" alt="image-20210618211907299"></p></li><li><p>打开另一个客户端，给 channel1 发布消息 hello：返回的1是订阅者数量</p><p><img src="/2022/07/07/redis/image-20210618212029799.jpg" alt="image-20210618212029799"></p></li><li><p>打开第一个客户端可以看到发送的消息：</p><p><img src="/2022/07/07/redis/image-20210618211941020.jpg" alt="image-20210618211941020"></p></li></ul><h2 id="Jedis操作Redis6"><a href="#Jedis操作Redis6" class="headerlink" title="Jedis操作Redis6"></a>Jedis操作Redis6</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h4><ul><li><p>创建一个maven项目</p></li><li><p>导入Jedis所需依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">4.2</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>将redis.conf文件中bing注释掉和改为protected-mode no</p></li><li><p>需要把Liunx防火墙进行关闭</p><p><img src="/2022/07/07/redis/1657268242460.jpg" alt="1657268242460"></p></li><li><p>进行测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个jedis对象</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">    System.out.println(ping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Redis相关数据类型的测试——如String操作"><a href="#Redis相关数据类型的测试——如String操作" class="headerlink" title="Redis相关数据类型的测试——如String操作"></a>Redis相关数据类型的测试——如String操作</h4><p>参上数据类型命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//添加--key操作</span></span><br><span class="line">    jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="comment">//添加多个</span></span><br><span class="line">    jedis.mset(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    List&lt;String&gt; mget = jedis.mget(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;k2&quot;</span>);</span><br><span class="line">    System.out.println(mget);</span><br><span class="line">    <span class="comment">//获取所有</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key:keys)&#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>要求：</p><ol><li>输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入3次</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">telphoneTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        verifyCode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rand</span> <span class="operator">=</span> random.nextInt();;</span><br><span class="line">            code+=rand;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否超过三次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verifyCode</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//发送次数key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> phone+<span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> phone+<span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jedis.get(count);</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.setex(count,<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(s)&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            jedis.incr(count);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送次数已经超过三次&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.setex(codeKey,<span class="number">120</span>,getCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getRedis</span><span class="params">(String phone,String code)</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> phone+<span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jedis.get(codeKey);</span><br><span class="line">        <span class="keyword">if</span>(code.equals(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h2><ul><li><p>创建一个SpringBoot项目，导入依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--spring2.X集合redis 所需common-pool2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.yml设置相关配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    #Redis服务器地址</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.237</span><span class="number">.128</span></span><br><span class="line">    #Redis服务器连接端口</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    #Redis数据库索引（默认为<span class="number">0</span>）</span><br><span class="line">    database: <span class="number">0</span></span><br><span class="line">    #连接超时时间（毫秒）</span><br><span class="line">    timeout: <span class="number">1800000</span></span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        #连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">        max-active: <span class="number">20</span></span><br><span class="line">        #最大阻塞等待时间（负数表示没限制）</span><br><span class="line">        max-wait: -<span class="number">1</span></span><br><span class="line">        #连接池中的最大空闲连接</span><br><span class="line">        max-idle: <span class="number">5</span></span><br><span class="line">        #连接池中的最小空闲连接</span><br><span class="line">        min-idle: <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>添加redis配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot_redis.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启Redis操作（开启缓存）</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// 在使用注解@Bean返回RedisTemplate的时候，同时配置hashKey与hashValue的序列化方式。</span></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转移异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//配置序列化（解决乱码）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加测试方法(RedisTemplate中要添加类型)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot_redis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redisTest</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(test);</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis-事务、锁机制"><a href="#Redis-事务、锁机制" class="headerlink" title="Redis 事务、锁机制"></a>Redis 事务、锁机制</h2><h3 id="Redis-事务定义"><a href="#Redis-事务定义" class="headerlink" title="Redis 事务定义"></a>Redis 事务定义</h3><p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis 事务的主要作用就是串联多个命令防止别的命令插队。</p><h3 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h3><p>Redis 事务中有 Multi、Exec 和 discard 三个指令，在 Redis 中，从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。而组队的过程中可以通过 discard 来放弃组队。</p><p><img src="/2022/07/07/redis/image-20210619093306171-1657343075079.jpg" alt="image-20210619093306171"></p><h4 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a>案例说明：</h4><p><img src="/2022/07/07/redis/image-20210619093617872.jpg" alt="image-20210619093617872"><br>组队成功，提交成功。</p><p><img src="/2022/07/07/redis/image-20210619093741383.jpg" alt="image-20210619093741383"><br>组队阶段报错，提交失败。</p><p><img src="/2022/07/07/redis/image-20210619093941172.jpg" alt="image-20210619093941172"><br>组队成功，提交有成功有失败情况。</p><h4 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h4><p>如果<strong>组队阶段</strong>中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src="/2022/07/07/redis/image-20210619094058710.jpg" alt="image-20210619094058710"><br>如果<strong>执行阶段</strong>某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="/2022/07/07/redis/image-20210619094201203.jpg" alt="image-20210619094201203"></p><h3 id="为什么要做成事务"><a href="#为什么要做成事务" class="headerlink" title="为什么要做成事务"></a>为什么要做成事务</h3><p>想想一个场景：有很多人有你的账户，同时去参加双十一抢购。</p><h3 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h3><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>一个请求想给金额减 8000；</p><p>一个请求想给金额减 5000；</p><p>一个请求想给金额减 1000。</p><p><img src="/2022/07/07/redis/image-20210619094341090.jpg" alt="image-20210619094341090"></p><p>最终我们可以发现，总共金额是 10000，如果请求全部执行，那最后的金额变为 - 4000，很明显不合理。</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p><img src="/2022/07/07/redis/image-20210619094633896.jpg" alt="image-20210619094633896"><br>悲观锁 (Pessimistic Lock)，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p><img src="/2022/07/07/redis/image-20210619094741479.jpg" alt="image-20210619094741479"><br>乐观锁 (Optimistic Lock)，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis 就是利用这种 check-and-set 机制实现事务的。</p><h4 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h4><p>在执行 multi 之前，先执行 watch key1 [key2]，可以监视一个 (或多个) key ，如果在事务执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断。</p><p><img src="/2022/07/07/redis/image-20210619095200164.jpg" alt="image-20210619095200164"></p><h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><p>取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p><h3 id="Redis-事务三特性"><a href="#Redis-事务三特性" class="headerlink" title="Redis 事务三特性"></a>Redis 事务三特性</h3><ul><li><p>单独的隔离操作 ：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p></li><li><p>没有隔离级别的概念 ：队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行。</p></li><li><p>不保证原子性 ：事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 。</p></li></ul><h3 id="Redis-事务秒杀案例"><a href="#Redis-事务秒杀案例" class="headerlink" title="Redis_事务秒杀案例"></a>Redis_事务秒杀案例</h3><h4 id="解决计数器和人员记录的事务操作"><a href="#解决计数器和人员记录的事务操作" class="headerlink" title="解决计数器和人员记录的事务操作"></a>解决计数器和人员记录的事务操作</h4><p><img src="/2022/07/07/redis/image-20210619095633057.jpg" alt="image-20210619095633057"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot_redis.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillServer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSeckill</span><span class="params">(String userid, String proid)</span> &#123;</span><br><span class="line">        <span class="comment">//判断uid和perid是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(userid == <span class="literal">null</span> || proid == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户为空或商品ID为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//库存key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kcKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proid+<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line">        <span class="comment">//成功秒杀用户key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proid+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line">        <span class="comment">//获取商品库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kc</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(kcKey);</span><br><span class="line">        <span class="keyword">if</span>(kc == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀还未开始&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(kc) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;秒杀已经结束&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断用户是否重复秒杀</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">user</span> <span class="operator">=</span> redisTemplate.opsForSet().isMember(userKey,userid);</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;已参与秒杀，不能重复秒杀&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//库存-1(只有使用StringRedisSerializer序列化器才能使用incrment方法)</span></span><br><span class="line">        redisTemplate.opsForValue().decrement(kcKey);</span><br><span class="line">        <span class="comment">//加入成功秒杀用户</span></span><br><span class="line">        redisTemplate.opsForSet().add(userKey,userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;秒杀成功了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis-事务-—-秒杀并发模拟"><a href="#Redis-事务-—-秒杀并发模拟" class="headerlink" title="Redis 事务 — 秒杀并发模拟"></a>Redis 事务 — 秒杀并发模拟</h4><p>使用工具 ab 模拟测试：</p><ul><li><p>CentOS6 默认安装</p></li><li><p>CentOS7 需要手动安装</p><ul><li>联网：yum install httpd-tools</li><li>无网络：<ul><li>进入cd &#x2F;run&#x2F;media&#x2F;root&#x2F;CenOS 7 x86_64&#x2F;Packages（路径跟cenos6不同）</li><li>顺序安装：apr-1.4.8-3.e17.x87_64.rpm     apr-util-1.5.2-6.e17.x86_64.rpm     httpd-tools-2.4.6-67.e17.centos.x86_64.rpm</li></ul></li></ul></li></ul><h5 id="通过-ab-测试"><a href="#通过-ab-测试" class="headerlink" title="通过 ab 测试"></a>通过 ab 测试</h5><p>vim postfile 模拟表单提交参数， 以 &amp; 符号结尾，存放当前目录。</p><p>内容：proid&#x3D;1&amp;</p><p>执行：ab -n 1000 -c 100 -k -p ~&#x2F;postfile -T application&#x2F;x-www-form-urlencoded <a href="http://192.168.204.1:8080/seckill">http://192.168.204.1:8080/seckill</a></p><p><img src="/2022/07/07/redis/1657358059072.jpg" alt="1657358059072"></p><p><img src="/2022/07/07/redis/1657358089741.jpg" alt="1657358089741"></p><h4 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h4><p><img src="/2022/07/07/redis/image-20210619100303067.jpg" alt="image-20210619100303067"><br>利用乐观锁淘汰用户，解决超卖问题。</p><p><img src="/2022/07/07/redis/image-20210619100339429.jpg" alt="image-20210619100339429"></p><h4 id="继续增加并发测试"><a href="#继续增加并发测试" class="headerlink" title="继续增加并发测试"></a>继续增加并发测试</h4><h5 id="连接有限制"><a href="#连接有限制" class="headerlink" title="连接有限制"></a>连接有限制</h5><p>增加 - r 参数，-r Don’t exit on socket receive errors。</p><h5 id="连接超时，通过连接池解决"><a href="#连接超时，通过连接池解决" class="headerlink" title="连接超时，通过连接池解决"></a>连接超时，通过连接池解决</h5><p>节省每次连接 redis 服务带来的消耗，把连接好的实例反复利用。通过参数管理连接的行为，代码见项目中：</p><p>连接池参数：</p><ul><li><p>MaxTotal：控制一个 pool 可分配多少个 jedis 实例，通过 pool.getResource () 来获取；如果赋值为 - 1，则表示不限制；如果 pool 已经分配了 MaxTotal 个 jedis 实例，则此时 pool 的状态为 exhausted。</p></li><li><p>maxIdle：控制一个 pool 最多有多少个状态为 idle (空闲) 的 jedis 实例；</p></li><li><p>MaxWaitMillis：表示当 borrow 一个 jedis 实例时，最大的等待毫秒数，如果超过等待时间，则直接抛 JedisConnectionException；</p></li><li><p>testOnBorrow：获得一个 jedis 实例的时候是否检查连接可用性（ping ()）；如果为 true，则得到的 jedis 实例均是可用的。</p></li></ul><p>Jedis连接池</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot_redis.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">JedisPoolUtil</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title function_">getJedisPool</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == jedisPool)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (JedisPoolUtil.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> == jedisPool)&#123;</span><br><span class="line">                    <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">                    poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">                    poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    poolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">100</span>);</span><br><span class="line">                    poolConfig.setBlockWhenExhausted(<span class="literal">true</span>);</span><br><span class="line">                    poolConfig.setTestOnBorrow(<span class="literal">true</span>);<span class="comment">//ping PONG</span></span><br><span class="line">                    jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig,<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>,<span class="number">60000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != jedis)&#123;</span><br><span class="line">            jedisPool.returnResource(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上问题最终实现代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.237.128&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line">jedis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//秒杀过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line"><span class="keyword">if</span>(uid == <span class="literal">null</span> || prodid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 连接redis</span></span><br><span class="line"><span class="comment">//Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span></span><br><span class="line"><span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 拼接key</span></span><br><span class="line"><span class="comment">// 3.1 库存key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">kcKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加乐观锁(监视库存)</span></span><br><span class="line">jedis.watch(kcKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line"><span class="type">String</span> <span class="variable">kc</span> <span class="operator">=</span> jedis.get(kcKey);</span><br><span class="line"><span class="keyword">if</span>(kc == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line"><span class="keyword">if</span>(jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line"><span class="keyword">if</span>(Integer.parseInt(kc)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7 秒杀过程</span></span><br><span class="line"><span class="comment">//使用事务</span></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//组队操作</span></span><br><span class="line">multi.decr(kcKey);</span><br><span class="line">multi.sadd(userKey,uid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(results == <span class="literal">null</span> || results.size()==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.1 库存-1</span></span><br><span class="line"><span class="comment">//jedis.decr(kcKey);</span></span><br><span class="line"><span class="comment">//7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line"><span class="comment">//jedis.sadd(userKey,uid);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决库存遗留问题"><a href="#解决库存遗留问题" class="headerlink" title="解决库存遗留问题"></a>解决库存遗留问题</h4><h5 id="已经秒光，可是还有库存"><a href="#已经秒光，可是还有库存" class="headerlink" title="已经秒光，可是还有库存"></a>已经秒光，可是还有库存</h5><p>已经秒光，可是还有库存。原因：乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了。</p><p><img src="/2022/07/07/redis/image-20210619101322601-1657366322111.jpg" alt="image-20210619101322601"></p><h5 id="LUA-脚本在-Redis-中的优势"><a href="#LUA-脚本在-Redis-中的优势" class="headerlink" title="LUA 脚本在 Redis 中的优势"></a>LUA 脚本在 Redis 中的优势</h5><ul><li><p>将复杂的或者多步的 redis 操作，写为一个脚本，一次提交给 redis 执行，减少反复连接 redis 的次数，提升性能。</p></li><li><p>LUA 脚本是类似 redis 事务，有一定的原子性，不会被其他命令插队，可以完成一些 redis 事务性的操作。</p></li><li><p>但是注意 redis 的 lua 脚本功能，只有在 Redis 2.6 以上的版本才可以使用。</p></li><li><p>利用 lua 脚本淘汰用户，解决超卖问题。</p></li><li><p>redis 2.6 版本以后，通过 lua 脚本解决争抢问题，实际上是 redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题。</p></li></ul><p><img src="/2022/07/07/redis/image-20210619101853376.jpg" alt="image-20210619101853376"></p><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><h6 id="SecKill-redisByScript-java代码"><a href="#SecKill-redisByScript-java代码" class="headerlink" title="SecKill_redisByScript.java代码"></a>SecKill_redisByScript.java代码</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local usrid=KEYS[1];</span><br><span class="line">local proid=KEYS[2];</span><br><span class="line">local qtkey=&quot;sk:&quot;..proid.&quot;:qt&quot;;</span><br><span class="line">local userKey=&quot;sk:&quot;..proid.&quot;user&quot;;</span><br><span class="line">local userExists=redis.call(&quot;sismember&quot;,userKey,userid);</span><br><span class="line">if tonumber(userExists)==1 then</span><br><span class="line">return 2;</span><br><span class="line">end</span><br><span class="line">local num=redis.call(&quot;get&quot;,qtkey);</span><br><span class="line">if tonumber(num)&lt;=0 then</span><br><span class="line">return 0;</span><br><span class="line">else</span><br><span class="line">redis.call(&quot;decr&quot;,qtkey);</span><br><span class="line">redis.call(&quot;sadd&quot;,userKey,userid);</span><br><span class="line">end</span><br><span class="line">retyurn 1;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/redis/1657367440463.jpg" alt="1657367440463"></p><p><img src="/2022/07/07/redis/1657367515219.jpg" alt="1657367515219"></p><p><img src="/2022/07/07/redis/1657367544059.jpg" alt="1657367544059"></p><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><p><img src="/2022/07/07/redis/1657367891201.jpg" alt="1657367891201"></p><h2 id="Redis-持久化之-RDB"><a href="#Redis-持久化之-RDB" class="headerlink" title="Redis 持久化之 RDB"></a>Redis 持久化之 RDB</h2><h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><p>官网介绍：<a href="http://www.redis.io/">http://www.redis.io</a></p><p>Redis 提供了 2 个不同形式的持久化方式：</p><p>RDB（Redis DataBase）</p><p>AOF（Append Of File）</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里。</p><h4 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的"></a>备份是如何执行的</h4><p>Redis 会单独创建（fork）一个子进程来进行持久化，首先会将数据写入到一个<strong>临时文件</strong>中，待持久化过程都结束了，再用这个临时文件<strong>替换上次持久化好的文件</strong>。整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。<strong>RDB 的缺点是最后一次持久化后的数据可能丢失</strong>。</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li><p>Fork 的作用是复制一个与当前进程<strong>一样的进程</strong>。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，<strong>并作为原进程的子进程</strong>。</p></li><li><p>在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了 “<strong>写时复制技术</strong>”。</p></li><li><p><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p></li></ul><h4 id="RDB-持久化流程"><a href="#RDB-持久化流程" class="headerlink" title="RDB 持久化流程"></a>RDB 持久化流程</h4><p><img src="/2022/07/07/redis/image-20210619103155712.jpg" alt="image-20210619103155712"></p><h4 id="dump-rdb-文件"><a href="#dump-rdb-文件" class="headerlink" title="dump.rdb 文件"></a>dump.rdb 文件</h4><p>在 redis.conf 中配置文件名称，默认为 dump.rdb。</p><p><img src="/2022/07/07/redis/1657368952756.jpg" alt="1657368952756"></p><h4 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h4><p>rdb 文件的保存路径，也可以修改。默认为 Redis 启动时命令行所在的目录下 “dir .&#x2F;”。</p><p><img src="/2022/07/07/redis/1657368990445.jpg" alt="1657368990445"></p><h3 id="如何触发-RDB-快照；保持策略"><a href="#如何触发-RDB-快照；保持策略" class="headerlink" title="如何触发 RDB 快照；保持策略"></a>如何触发 RDB 快照；保持策略</h3><h4 id="配置文件中默认的快照配置"><a href="#配置文件中默认的快照配置" class="headerlink" title="配置文件中默认的快照配置"></a>配置文件中默认的快照配置</h4><p><img src="/2022/07/07/redis/image-20210619103558260.jpg" alt="image-20210619103558260"></p><h4 id="命令-save-VS-bgsave"><a href="#命令-save-VS-bgsave" class="headerlink" title="命令 save VS bgsave"></a>命令 save VS bgsave</h4><p>save ：save 时只管保存，其它不管，全部阻塞。手动保存，不建议。</p><p><strong>bgsave：Redis 会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</strong></p><p>可以通过 <strong>lastsave</strong> 命令获取最后一次成功执行快照的时间。</p><h4 id="flushall-命令"><a href="#flushall-命令" class="headerlink" title="flushall 命令"></a>flushall 命令</h4><p>执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义。</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>格式：save秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，<strong>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次</strong>。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><h4 id="stop-writer-on-bgsave-error"><a href="#stop-writer-on-bgsave-error" class="headerlink" title="stop-writer-on-bgsave-error"></a>stop-writer-on-bgsave-error</h4><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes。</p><h4 id="rdbcompression压缩文件"><a href="#rdbcompression压缩文件" class="headerlink" title="rdbcompression压缩文件"></a>rdbcompression压缩文件</h4><p>对于储存到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭。推荐yes.</p><h4 id="rdbchecksum检查完整性"><a href="#rdbchecksum检查完整性" class="headerlink" title="rdbchecksum检查完整性"></a>rdbchecksum检查完整性</h4><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验。推荐yes。</p><h4 id="rdb的备份"><a href="#rdb的备份" class="headerlink" title="rdb的备份"></a>rdb的备份</h4><p>先通过config get dir 查询rdb文件的目录（进入&#x2F;usr&#x2F;local&#x2F;bin目录），将*.rdb文件拷贝到别的地方cp dump.rdb dump2.rdb</p><p>rdb的恢复</p><ul><li>关闭redis</li><li>先把备份的文件拷贝到工作目录下cp dump2.rdb dump.rdb</li><li>启动redis（redis-cli），备份数据会直接加载dump.rdb文件</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><p>适合大规模的数据恢复</p></li><li><p>对数据完整性和一致性要求不高更适合使用</p></li><li><p>节省磁盘空间</p></li><li><p>恢复速度快</p><p><img src="/2022/07/07/redis/image-20210619104039665.jpg" alt="image-20210619104039665"></p></li></ul><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li><p>Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑。</p></li><li><p>虽然 Redis 在 fork 时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能。</p></li><li><p>在备份周期在一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失最后一次快照后的所有修改。</p></li></ul><h3 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h3><p>动态停止 RDB：redis-cli config set save “”#save 后给空值，表示禁用保存策略。</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619104309571.jpg" alt="image-20210619104309571"></p><h2 id="Redis-持久化之-AOF"><a href="#Redis-持久化之-AOF" class="headerlink" title="Redis 持久化之 AOF"></a>Redis 持久化之 AOF</h2><h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><p><strong>以日志的形式来记录每个写操作（增量保存）</strong>，将 Redis 执行过的所有写指令记录下来 (<strong>读操作不记录)， 只许追加文件但不可以改写文件</strong>，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h4 id="AOF-持久化流程"><a href="#AOF-持久化流程" class="headerlink" title="AOF 持久化流程"></a>AOF 持久化流程</h4><ul><li><p>客户端的请求写命令会被 append 追加到 AOF 缓冲区内；</p></li><li><p>AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作 sync 同步到磁盘的 AOF 文件中；</p></li><li><p>AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；</p></li><li><p>Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的。</p><p><img src="/2022/07/07/redis/image-20210619104813563.jpg" alt="image-20210619104813563"></p></li></ul><h4 id="AOF-默认不开启"><a href="#AOF-默认不开启" class="headerlink" title="AOF 默认不开启"></a>AOF 默认不开启</h4><p>可以在 redis.conf 中,将 appendonly no改为yes,配置文件名称默认为 appendonly.aof</p><p>AOF 文件的保存路径，同 RDB 的路径一致。</p><h4 id="AOF-和-RDB-同时开启，redis-听谁的？"><a href="#AOF-和-RDB-同时开启，redis-听谁的？" class="headerlink" title="AOF 和 RDB 同时开启，redis 听谁的？"></a>AOF 和 RDB 同时开启，redis 听谁的？</h4><p>AOF 和 RDB 同时开启，系统默认取 AOF 的数据（数据不会存在丢失）。</p><h4 id="AOF-启动、修复、恢复"><a href="#AOF-启动、修复、恢复" class="headerlink" title="AOF 启动、修复、恢复"></a>AOF 启动、修复、恢复</h4><ul><li><p>AOF 的备份机制和性能虽然和 RDB 不同，但是备份和恢复的操作同 RDB 一样，都是拷贝备份文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载。</p></li><li><p>正常恢复</p><ul><li>修改默认的 appendonly no，改为 yes。</li><li>将有数据的 aof 文件复制一份保存到对应目录&#x2F;usr&#x2F;local&#x2F;bin (查看目录：config get dir)。</li><li>恢复：重启 redis 然后重新加载。</li></ul></li><li><p>异常恢复</p><ul><li>修改默认的 appendonly no，改为 yes。</li><li>如遇到 AOF 文件损坏，通过进入&#x2F;usr&#x2F;local&#x2F;bin中运行命令redis-check-aof –fix appendonly.aof 进行恢复。</li><li>备份被写坏的 AOF 文件。</li><li>恢复：重启 redis，然后重新加载。</li></ul></li></ul><h4 id="AOF-同步频率设置"><a href="#AOF-同步频率设置" class="headerlink" title="AOF 同步频率设置"></a>AOF 同步频率设置</h4><ul><li><p>appendfsync always：始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好。</p></li><li><p>appendfsync everysec：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p></li><li><p>appendfsync no：redis 不主动进行同步，把同步时机交给操作系统。</p></li></ul><h4 id="Rewrite-压缩"><a href="#Rewrite-压缩" class="headerlink" title="Rewrite 压缩"></a>Rewrite 压缩</h4><h5 id="Rewrite-压缩是什么"><a href="#Rewrite-压缩是什么" class="headerlink" title="Rewrite 压缩是什么"></a>Rewrite 压缩是什么</h5><p>AOF 采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令 bgrewriteaof。</p><h5 id="重写原理，如何实现重写"><a href="#重写原理，如何实现重写" class="headerlink" title="重写原理，如何实现重写"></a>重写原理，如何实现重写</h5><p>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写 (也是先写临时文件最后再 rename)，<strong>redis4.0 版本后的重写，是指把 rdb 的快照，以二进制的形式附在新的 aof 头部，作为已有的历史数据，替换掉原来的流水账操作</strong>。</p><h5 id="no-appendfsync-on-rewrite："><a href="#no-appendfsync-on-rewrite：" class="headerlink" title="no-appendfsync-on-rewrite："></a>no-appendfsync-on-rewrite：</h5><ul><li><p>如果 no-appendfsync-on-rewrite&#x3D;yes ，不写入 aof 文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p></li><li><p>如果 no-appendfsync-on-rewrite&#x3D;no，还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p></li></ul><h5 id="触发机制，何时重写"><a href="#触发机制，何时重写" class="headerlink" title="触发机制，何时重写"></a>触发机制，何时重写</h5><p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发。</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定 Redis 要满足一定条件才会进行重写。</p><ul><li><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到 100% 时开始重写（文件是原来重写后文件的 2 倍时触发）。</p></li><li><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件 64MB。达到这个值开始重写。</p></li><li><p>系统载入时或者上次重写完毕时，Redis 会记录此时 AOF 大小，设为 base_size,</p></li><li><p>如果 Redis 的 <strong>AOF 当前大小 &gt;&#x3D; base_size +base_size*100% (默认) 且当前大小 &gt;&#x3D;64mb (默认)</strong> 的情况下，Redis 会对 AOF 进行重写。</p></li></ul><p>例如：文件达到 70MB 开始重写，降到 50MB，下次什么时候开始重写？100MB</p><h5 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h5><ul><li><p>bgrewriteaof 触发重写，判断是否当前有 bgsave 或 bgrewriteaof 在运行，如果有，则等待该命令结束后再继续执行；</p></li><li><p>主进程 fork 出子进程执行重写操作，保证主进程不会阻塞；</p></li><li><p>子进程遍历 redis 内存中数据到临时文件，客户端的写请求同时写入 aof_buf 缓冲区和 aof_rewrite_buf 重写缓冲区，保证原 AOF 文件完整以及新 AOF 文件生成期间的新的数据修改动作不会丢失；</p></li><li><p>子进程写完新的 AOF 文件后，向主进程发信号，父进程更新统计信息。主进程把 aof_rewrite_buf 中的数据写入到新的 AOF 文件；</p></li><li><p>使用新的 AOF 文件覆盖旧的 AOF 文件，完成 AOF 重写。</p><p><img src="/2022/07/07/redis/image-20210619110418254.jpg" alt="image-20210619110418254"></p></li></ul><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><p><img src="/2022/07/07/redis/1657439390398.jpg" alt="1657439390398"></p><ul><li><p>备份机制更稳健，丢失数据概率更低。</p></li><li><p>可读的日志文本，通过操作 AOF 稳健，可以处理误操作。</p></li></ul><h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ul><li><p>比起 RDB 占用更多的磁盘空间。</p></li><li><p>恢复备份速度要慢。</p></li><li><p>每次读写都同步的话，有一定的性能压力。</p></li><li><p>存在个别 Bug，造成恢复不能。</p></li></ul><h4 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h4><p><img src="/2022/07/07/redis/1657439566943.jpg" alt="1657439566943"></p><h3 id="总结-Which-one"><a href="#总结-Which-one" class="headerlink" title="总结 (Which one)"></a>总结 (Which one)</h3><h4 id="用哪个好"><a href="#用哪个好" class="headerlink" title="用哪个好"></a>用哪个好</h4><p>官方推荐两个都启用：</p><p>如果对数据不敏感，可以选单独用 RDB。</p><p>不建议单独用 AOF，因为可能会出现 Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p><h4 id="官网建议"><a href="#官网建议" class="headerlink" title="官网建议"></a>官网建议</h4><ul><li><p>RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储。</p></li><li><p>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾。</p></li><li><p>Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</p></li><li><p>同时开启两种持久化方式：在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</p></li><li><p>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？建议不要，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)，快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。</p></li></ul><h5 id="性能建议："><a href="#性能建议：" class="headerlink" title="性能建议："></a>性能建议：</h5><ul><li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留 save 9001 这条规则。</li><li>如果使用 AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单，只 load 自己的 AOF 文件就可以了。</li><li>aof 代价：一是带来了持续的 IO，二是 AOF rewrite 的最后，将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</li><li>只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上。默认超过原大小 100% 大小时重写可以改到适当的数值。</li></ul><h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h2><p>主机数据更新后根据配置和策略， 自动同步到备机的 master&#x2F;slave 机制，<strong>Master 以写为主，Slave 以读为主，主从复制节点间数据是全量的。</strong></p><p>作用：</p><ul><li><p>读写分离，性能扩展</p></li><li><p>容灾快速恢复（当其中一个从服务器挂掉后，可以切换到其他从服务器）</p></li></ul><p><img src="/2022/07/07/redis/1657439888454.jpg" alt="1657439888454"></p><h3 id="主从复制配置"><a href="#主从复制配置" class="headerlink" title="主从复制配置"></a>主从复制配置</h3><p><img src="/2022/07/07/redis/1657444112594.jpg" alt="1657444112594"></p><ul><li>拷贝多个redis.conf文件，conf文件开启daemonize yes，appendonly no 关掉或者换名字</li><li>拷贝文件配置：<ul><li>include path进行引入(写绝对路径)</li><li>pid文件名称 pidfile</li><li>指定端口port</li><li>Log文件名称</li><li>dump.rdb 名称 dbfilename</li></ul></li></ul><h4 id="新建redis6379-conf，填写以下内容"><a href="#新建redis6379-conf，填写以下内容" class="headerlink" title="新建redis6379.conf，填写以下内容"></a>新建redis6379.conf，填写以下内容</h4><ul><li><p>在myredis目录中创建vi redis6379.conf</p></li><li><p>写入以下配置</p><ul><li><p>include &#x2F;myredis&#x2F;redis.confpidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pidport 6379dbfilename dump6379.rdb</p><p><img src="/2022/07/07/redis/1657442642014.jpg" alt="1657442642014"></p></li></ul></li></ul><h4 id="新建redis6380-conf，填写以下内容"><a href="#新建redis6380-conf，填写以下内容" class="headerlink" title="新建redis6380.conf，填写以下内容"></a>新建redis6380.conf，填写以下内容</h4><p><img src="/2022/07/07/redis/1657442521586.jpg" alt="1657442521586"></p><h4 id="新建redis6381-conf，填写以下内容"><a href="#新建redis6381-conf，填写以下内容" class="headerlink" title="新建redis6381.conf，填写以下内容"></a>新建redis6381.conf，填写以下内容</h4><p><img src="/2022/07/07/redis/1657442590216.jpg" alt="1657442590216"></p><h4 id="启动三台redis服务器"><a href="#启动三台redis服务器" class="headerlink" title="启动三台redis服务器"></a>启动三台redis服务器</h4><p><img src="/2022/07/07/redis/1657442763276.jpg" alt="1657442763276"></p><h4 id="查看系统进程，看看三台服务器是否启动"><a href="#查看系统进程，看看三台服务器是否启动" class="headerlink" title="查看系统进程，看看三台服务器是否启动"></a>查看系统进程，看看三台服务器是否启动</h4><p><img src="/2022/07/07/redis/1657442837721.jpg" alt="1657442837721"></p><h4 id="查看三台主机运行情况"><a href="#查看三台主机运行情况" class="headerlink" title="查看三台主机运行情况"></a>查看三台主机运行情况</h4><p>info replication  打印主从复制的相关信息</p><p><img src="/2022/07/07/redis/1657443233457.jpg" alt="1657443233457"></p><p><img src="/2022/07/07/redis/1657443283426.jpg" alt="1657443283426"></p><p><img src="/2022/07/07/redis/1657443306196.jpg" alt="1657443306196"></p><h4 id="配从（库）不配主（库）"><a href="#配从（库）不配主（库）" class="headerlink" title="配从（库）不配主（库）"></a>配从（库）不配主（库）</h4><p>slaveof ip port 成为某个实例的从服务器</p><ul><li><p>在6380和6381上执行：slaveof  127.0.0.1 6379</p><p><img src="/2022/07/07/redis/1657443530033.jpg" alt="1657443530033"></p><p><img src="/2022/07/07/redis/1657443575741.jpg" alt="1657443575741"></p></li></ul><ol><li><p>在主机上写，在从机上可以读取数据</p><p>在从机上写数据报错（从机只能读）</p><p><img src="/2022/07/07/redis/1657443939270.jpg" alt="1657443939270"></p></li><li><p>主机挂掉，进行重启，一切如初。</p></li><li><p>从机重启需重设：slaveof 12.0.0.1 6379</p></li><li><p>可以将配置写入到文件中，永久生效。</p><p><img src="/2022/07/07/redis/1657444075254.jpg" alt="1657444075254"></p></li></ol><h3 id="常用三招"><a href="#常用三招" class="headerlink" title="常用三招"></a>常用三招</h3><h4 id="一主一仆"><a href="#一主一仆" class="headerlink" title="一主一仆"></a>一主一仆</h4><p>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制？比如从k4进来，那之前的k1、k2、k3是否也可以复制？</p><p>当slave挂掉之后，master添加的数据（k1,k2,k3），slave再添加为从机，依然有之前添加是数据（k1,k2,k3）,相当于从头开始复制。</p><p>从机是否可以写？不可以。</p><p>主机shutdown后情况如何？从机上位还是原地待令？从机原地待命，重新连接后还是主机。</p><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>上一个slave（从机）可以是下一个slave的master(主机)，slave同样可以接收其他slave的连接和同步请求，那么该slave作为链条中下一个的master，可以有效减轻master的写压力。</p><ul><li>用slaveof ip port将从机变为另一台从机的主机（如在6381中运行slave 127.0.0.1 6380）；中途变更转向：会清除之前的数据，重新拷贝最新的</li><li>风险是一旦某个slave挂掉，后面的slave都无法备份</li><li>主机挂了，从机（假主机）还是从机，无法写数据了。</li></ul><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当一个master挂掉后，后面的slave<strong>用slaveof no one 将从机变为主机</strong>可以立刻升为master，其后面的slave不用做任何修改。</p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><p><img src="/2022/07/07/redis/1657450737991.jpg" alt="1657450737991"></p><ul><li><p>Slave 启动成功连接到 master 后会发送一个 sync 命令；</p></li><li><p>Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，以完成一次完全同步。</p></li><li><p>全量复制：slave 服务器在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步。</p></li><li><p>但是只要是重新连接 master，一次完全同步（全量复制) 将被自动执行。</p></li></ul><p><img src="/2022/07/07/redis/image-20210619112440704.jpg" alt="image-20210619112440704"></p><h3 id="哨兵模式-sentinel-（反客为主的自动版）"><a href="#哨兵模式-sentinel-（反客为主的自动版）" class="headerlink" title="哨兵模式 (sentinel)（反客为主的自动版）"></a>哨兵模式 (sentinel)（反客为主的自动版）</h3><p>反客为主：当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改。用 slaveof no one 指令将从机变为主机。而<strong>哨兵模式是反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</strong></p><p><img src="/2022/07/07/redis/image-20210619154258222.jpg" alt="image-20210619154258222"></p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li><p>同上一主二仆模式</p></li><li><p>在自定义的&#x2F;myredis目录下新建sentinel.conf文件，名字不能出错。</p></li><li><p>在sentinel.conf文件中填写内容  sentinel monitor mymaster 127.0.0.1 6379 1（mymaster为监控对象起的服务器名称，1为至少有多少个哨兵同意迁移的数量）</p><p><img src="/2022/07/07/redis/1657452165244.jpg" alt="1657452165244"></p></li><li><p>redis-sentinel &#x2F;myredis&#x2F;sentinel.conf 进行启动</p><p><img src="/2022/07/07/redis/1657454171110.jpg" alt="1657454171110"></p></li><li><p>当主机挂掉，从机选举产生新的主机；哪个从机会被选举为主机呢？根据优先级别：slave-priority（replica-priority） 。</p></li><li><p>原主机重启后会变为从机。</p></li></ul><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p><img src="/2022/07/07/redis/image-20210619154850009.jpg" alt="image-20210619154850009"><br>优先级：在 redis.conf 中默认 slave-priority 100（replica-priority 100），值越小优先级越高。</p><p>偏移量：指获得原主机数据最全的概率。</p><p>runid：每个 redis 实例启动后都会随机生成一个 40 位的 runid。</p><h4 id="主从复刻"><a href="#主从复刻" class="headerlink" title="主从复刻"></a>主从复刻</h4><p><img src="/2022/07/07/redis/1657455169125.jpg" alt="1657455169125"></p><h2 id="Redis-集群（cluster-模式）"><a href="#Redis-集群（cluster-模式）" class="headerlink" title="Redis 集群（cluster 模式）"></a>Redis 集群（cluster 模式）</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>容量不够，redis 如何进行扩容？</p><p>并发写操作， redis 如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过代理主机来解决，但是 redis3.0 中提供了解决方案。就是<strong>无中心化集群配置</strong>（任何一台服务器都可以作为集群的入口，集群内部服务器可以互相访问）。</p><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><p>Redis 集群（包括很多小集群）实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1&#x2F;N，即一个小集群存储 1&#x2F;N 的数据，每个小集群里面维护好自己的 1&#x2F;N 的数据。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><p>该模式的 redis 集群特点是：分治、分片。</p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><p>同上，主从复制的搭建步骤，搭建三台主机和三台从机</p><h4 id="redis-cluster-配置修改"><a href="#redis-cluster-配置修改" class="headerlink" title="redis cluster 配置修改"></a>redis cluster 配置修改</h4><ul><li>cluster-enabled yes   打开集群模式cluster-config-file nodes-6379.conf    设定节点配置文件名cluster-node-timeout 15000    设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换</li></ul><p><img src="/2022/07/07/redis/1657520819160.jpg" alt="1657520819160"></p><ul><li><p>其他拷贝文件进行替换，如在redis6380.conf文件中，命令%s&#x2F;6379&#x2F;6380</p></li><li><p>启动6个redis服务</p></li></ul><p><img src="/2022/07/07/redis/1657521662004.jpg" alt="1657521662004"></p><h4 id="将六个节点合成一个集群"><a href="#将六个节点合成一个集群" class="headerlink" title="将六个节点合成一个集群"></a>将六个节点合成一个集群</h4><ul><li><p>组合之前，请确保所有redis实例启动后，node-xxxx.conf文件都生成正常。</p><p><img src="/2022/07/07/redis/1657522058446.jpg" alt="1657522058446"></p></li><li><p>进行合体：进入redis安装的目录cd &#x2F;redis-6.2.7&#x2F;src；运行命令：redis-cli –cluster create –cluster-replicas 1 192.168.237.128:6379  192.168.237.128:6380 192.168.237.128:6381 192.168.237.128:6389 192.168.237.128:6390 192.168.237.128:6391（此处不要用127.0.0.1，请用真实IP地址 ；–cluster-replicas 1 表示采用最简单的方式配置集群，一台主机，一台从机，正好三组；M表示主机，S表示从机）</p><p><img src="/2022/07/07/redis/1657523499539.jpg" alt="1657523499539"></p></li><li><p>集群连接</p><ul><li>普通方式登录：redis-cli -p 6379 可能直接进入读主机，存储数据时，会出现 MOVED 重定向操作，所以，应该以集群方式登录。</li><li>集群登录：<strong>redis-cli -c -p 6379</strong> 采用集群策略连接，设置数据会自动切换到相应的写主机.</li></ul></li><li><p>通过 cluster nodes 命令查看集群信息（查看主从关系）</p><p><img src="/2022/07/07/redis/1657524061841.jpg" alt="1657524061841"></p></li></ul><h3 id="redis-cluster-如何分配这六个节点？"><a href="#redis-cluster-如何分配这六个节点？" class="headerlink" title="redis cluster 如何分配这六个节点？"></a>redis cluster 如何分配这六个节点？</h3><p>一个集群至少要有<strong>三个主节点</strong>。<br>选项 –cluster-replicas 1 ：表示我们希望为集群中的每个主节点创建一个从节点。<br>分配原则尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。</p><h3 id="什么是-slots"><a href="#什么是-slots" class="headerlink" title="什么是 slots"></a>什么是 slots</h3><p><img src="/2022/07/07/redis/1657528492737.jpg" alt="1657528492737"></p><p>一个 Redis 集群包含 16384 个插槽（hash slot），数据库中的每个键都属于这 16384 个插槽的其中一个。集群使用公式 CRC16 (key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16 (key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p><p>节点 A 负责处理 0 号至 5460 号插槽。<br>节点 B 负责处理 5461 号至 10922 号插槽。<br>节点 C 负责处理 10923 号至 16383 号插槽。</p><h3 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h3><p>在 redis-cli 每次录入、查询键值，redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的 redis 实例地址和端口。</p><p><img src="/2022/07/07/redis/1657529090731.jpg" alt="1657529090731"></p><p>redis-cli 客户端提供了 <strong>–c 参数实现自动重定向</strong>。如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p><p>不在一个 slot 下的键值，是<strong>不能使用 mget,mset 等多键操作</strong>。</p><p><img src="/2022/07/07/redis/1657529044574.jpg" alt="1657529044574"></p><p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。</p><p><img src="/2022/07/07/redis/1657529156195.jpg" alt="1657529156195"></p><h3 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h3><p>cluster keyslot key  返回key的槽值</p><p>cluster countkeysinslot  slot 返回自己主机slot槽中键的数量</p><p>cluster getkeysinslot slot count  返回count个slot槽中的键。</p><p><img src="/2022/07/07/redis/1657529732257.jpg" alt="1657529732257"></p><h3 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h3><ul><li><p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15 秒超时</strong></p></li><li><p>主节点恢复后，主从关系会如何？主节点回来变成从机。</p></li><li><p>如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续？</p><ul><li>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 yes ，那么整个集群都挂掉。</li><li>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 no ，那么，该插槽数据全都不能使用，也无法存储。</li><li>redis.conf中的参数 cluster-require-full-coverage</li></ul></li></ul><h3 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h3><p>即使连接的不是主机，集群会自动切换主机存储。主机写、从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机都能读到数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *演示redis集群操作</span></span><br><span class="line"><span class="comment"> *需要关闭防火墙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClusterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">HostAndPort</span> <span class="variable">hostAndPort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.237.128&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(hostAndPort);</span><br><span class="line">        <span class="comment">//进行操作</span></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;hua&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;hua&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        jedisCluster.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis-集群优点"><a href="#Redis-集群优点" class="headerlink" title="Redis 集群优点"></a>Redis 集群优点</h3><ul><li><p>实现扩容</p></li><li><p>分摊压力</p></li><li><p>无中心配置相对简单</p></li></ul><h3 id="Redis-集群不足"><a href="#Redis-集群不足" class="headerlink" title="Redis 集群不足"></a>Redis 集群不足</h3><ul><li><p>多键操作是不被支持的。</p></li><li><p>多键的 Redis 事务是不被支持的，lua 脚本不被支持。</p></li><li><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p></li></ul><h2 id="Redis-应用问题解决"><a href="#Redis-应用问题解决" class="headerlink" title="Redis 应用问题解决"></a>Redis 应用问题解决</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p><p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><h5 id="缓存穿透发生的条件："><a href="#缓存穿透发生的条件：" class="headerlink" title="缓存穿透发生的条件："></a>缓存穿透发生的条件：</h5><ul><li>应用服务器压力变大</li><li>redis 命中率降低</li><li>一直查询数据库，使得数据库压力太大而压垮</li><li>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</li></ul><p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p><p><img src="/2022/07/07/redis/1657605773815.jpg" alt="1657605773815"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><ul><li><p><strong>对空值缓存</strong>：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</p></li><li><p><strong>设置可访问的名单（白名单</strong>）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</p></li><li><p><strong>采用布隆过滤器</strong>：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p></li><li><p><strong>进行实时监控</strong>：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</p></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><h4 id="缓存击穿的现象："><a href="#缓存击穿的现象：" class="headerlink" title="缓存击穿的现象："></a>缓存击穿的现象：</h4><ul><li>数据库访问压力瞬时增加，数据库崩溃</li><li>redis 里面没有出现大量 key 过期</li><li>redis 正常运行</li></ul><p>缓存击穿发生的原因：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p><p><img src="/2022/07/07/redis/1657606631718.jpg" alt="1657606631718"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。这个时候，需要考虑一个问题：缓存被”击穿”的问题。</p><ul><li><p>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</p></li><li><p>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</p></li><li><p>使用锁：</p><ul><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。</li><li>当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；</li><li>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li></ul></li></ul><p><img src="/2022/07/07/redis/image-20210619165505113.jpg" alt="image-20210619165505113"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期，一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><p><strong>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问，不同请求查询的大量key过期；后者是大量请求的同一个key过期。</strong></p><p><img src="/2022/07/07/redis/image-20210619170416116.jpg" alt="image-20210619170416116"><br>缓存失效瞬间：</p><p><img src="/2022/07/07/redis/1657607481833.jpg" alt="1657607481833"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</p></li><li><p>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</p></li><li><p>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</p></li><li><p>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ul><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis 等）</p></li><li><p>基于 Zookeeper</p></li></ul><p>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</p><ul><li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li><li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li></ul><p>每一种分布式锁解决方案都有各自的优缺点：</p><p>性能：redis 最高</p><p>可靠性：zookeeper 最高</p><h4 id="解决方案：使用-redis-实现分布式锁"><a href="#解决方案：使用-redis-实现分布式锁" class="headerlink" title="解决方案：使用 redis 实现分布式锁"></a>解决方案：使用 redis 实现分布式锁</h4><p><img src="/2022/07/07/redis/image-20210619213926122.jpg" alt="image-20210619213926122"></p><p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p><p>redis命令：set user 10 NX PX 10000</p><p>EX second：设置键的过期时间为second秒。set ket value EX second等同于setex key second value。</p><p>PX millisecond：设置键的过期时间为millisecond毫秒。set key value PX millisecond等同于psetex key millisecond value。</p><p>NX：当键不存在时，才对键进行设置操作。set key value NX等同于setnx key value。</p><p>XX：只在键已经存在是，才对键进行设置</p><ul><li><p>set key ex 3000 nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p><p><img src="/2022/07/07/redis/1657610042480.jpg" alt="1657610042480"></p></li><li><p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p><p><img src="/2022/07/07/redis/1657611698936.jpg" alt="1657611698936"></p></li><li><p>lua脚本实现原子操作（判断uuid然后删除）</p><p><img src="/2022/07/07/redis/1657612491134.jpg" alt="1657612491134"></p></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/testLock&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//设置uuid</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">       <span class="comment">//获取锁，setne</span></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,uuid,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">       <span class="comment">//获取锁成功、查询num的值</span></span><br><span class="line">       <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">           <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);<span class="comment">//需要在redis服务器中设置set num 0</span></span><br><span class="line">           <span class="comment">//判断num为空return</span></span><br><span class="line">           <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//有值就转成int</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(value+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           <span class="comment">//把redis的num加一</span></span><br><span class="line">           redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">           <span class="comment">//释放锁del</span></span><br><span class="line">           <span class="comment">//判断uuid是否一样</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">lock1</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(lock1.equals(uuid))&#123;</span><br><span class="line">               redisTemplate.delete(<span class="string">&quot;lick&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//获取锁失败，每隔0.1秒在获取</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">100</span>);</span><br><span class="line">               testLock();</span><br><span class="line">           &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2022/07/07/redis/1657612620881.jpg" alt="1657612620881"></p><h3 id="RedLock"><a href="#RedLock" class="headerlink" title="RedLock"></a>RedLock</h3><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p><p>此种方式具有以下特性：</p><ul><li>互斥访问：即永远只有一个 client 能拿到锁。</li><li>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</li><li>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</li></ul><p>RedLock 原理（了解）</p><ul><li>获取当前 Unix 时间，以毫秒为单位。</li><li>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</li><li>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</li></ul><h2 id="Redis6-新功能"><a href="#Redis6-新功能" class="headerlink" title="Redis6 新功能"></a>Redis6 新功能</h2><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>Redis ACL是Access Control LIst（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5之前，Redis安全规则只有密码控制还有通过rename来调整高危命令比如fiushdb，keys *，shutdown等。Redis 6则根据ACL的功能对用户进行更细粒度的权限控制。</p><ol><li>接入权限：用户名和密码。</li><li>可以执行的命令。</li><li>可以操作的key。</li></ol><h4 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h4><ol><li><p>使用acl list命令展现用户权限列表。</p><p><img src="/2022/07/07/redis/1657613231561.jpg" alt="1657613231561"></p></li><li><p>使用acl cat命令：查看添加权限指令类别；acl cat String ：加参数类型名可以查看类型下具体命令。</p></li><li><p>使用acl whoami命令查看当前用户。</p></li><li><p>使用acl set user命令创建和编辑用户ACL</p><ol><li><p>ACL规则</p><p><img src="/2022/07/07/redis/1657613955543.jpg" alt="1657613955543"></p><p><img src="/2022/07/07/redis/1657613936741.jpg" alt="1657613936741"></p></li><li><p>命令acl setuser user1：创建新用户默认权限</p></li><li><p>acl setuser user2 on &gt;password ~cached:* +get：创建用户名、密码、ACL权限、启用的用户</p></li><li><p>author name password：切换用户</p></li></ol></li></ol><h3 id="Redis-IO-多线程"><a href="#Redis-IO-多线程" class="headerlink" title="Redis IO 多线程"></a>Redis IO 多线程</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>Redis6 终于支撑多线程了，告别单线程了吗？</p><p>IO 多线程其实指客户端交互部分的网络 IO 交互处理模块 多线程，而非执行命令多线程。Redis6 执行命令依然是单线程。</p><h4 id="原理架构"><a href="#原理架构" class="headerlink" title="原理架构"></a>原理架构</h4><p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:</p><p><img src="/2022/07/07/redis/image-20210619215600452.jpg" alt="image-20210619215600452"><br>另外，多线程 IO 默认也是不开启的，需要再配置文件redis.conf中配置：</p><ul><li><p>io-threads-do-reads yes</p></li><li><p>io-threads 4</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-SpringBoot</title>
      <link href="/2022/07/06/Shiro-SpringBoot/"/>
      <url>/2022/07/06/Shiro-SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>Shiro</p><h2 id="1-Shiro的工作原理"><a href="#1-Shiro的工作原理" class="headerlink" title="1.Shiro的工作原理"></a>1.Shiro的工作原理</h2><h3 id="1、Shiro的核心功能"><a href="#1、Shiro的核心功能" class="headerlink" title="1、Shiro的核心功能"></a>1、Shiro的核心功能</h3><p>认证（Authentication）：验证用户是否有相应的身份——登录认证；</p><p>授权（Authorization）：即权限验证；对已经通过认证的用户检查是否具有某个权限或者角色，从而控制是否能够进行某种操作；</p><p>会话管理（Session Management）：用户认证成功后创建会话，在没有退出之前，当前用户的所有信息都会保存在这个会话中；可以是普通的JavaSE应用，也可以是web应用；</p><p>加密管理（Cryptography）:对敏感信息进行加密处理；</p><h3 id="2-Shiro的核心组件"><a href="#2-Shiro的核心组件" class="headerlink" title="2.Shiro的核心组件"></a>2.Shiro的核心组件</h3><p><img src="https://bkimg.cdn.bcebos.com/pic/9825bc315c6034a8f93c7d0cce13495408237665?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto" alt="img"></p><p>Shrio三大核心组件：Subject、Security Manager、Realms</p><ul><li>Subject：表示待认证和授权的用户</li><li>Security Manager：他是Shiro框架的核心，Shiro就是通过Security Manager来进行内部实例的管理。并提过他来提供安全管理的各种服务。<ul><li>Authenticator，认证器</li><li>Anthorizer，授权器</li><li>Session Manager，会话管理器</li><li>CacheManager，缓存管理器</li></ul></li><li>Reaim：相当于Shiro进行认证和授权的数据源，充当了Shiro与安全数据之间的桥梁或者连接器。也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro会用应用配置的Realm中查找用户及其权限信息。</li></ul><h2 id="2、使用Shiro"><a href="#2、使用Shiro" class="headerlink" title="2、使用Shiro"></a>2、使用Shiro</h2><h3 id="1-导入Shiro的依赖"><a href="#1-导入Shiro的依赖" class="headerlink" title="1.导入Shiro的依赖"></a>1.导入Shiro的依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2-创建Shiro配置文件"><a href="#2-创建Shiro配置文件" class="headerlink" title="2.创建Shiro配置文件"></a>2.创建Shiro配置文件</h3><p>​在resource目录下创建.ini文件</p><p><img src="/2022/07/06/Shiro-SpringBoot/1655902064967.jpg" alt="1655902064967"></p><p>​在文件中误差用户，角色和权限的配置</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment">#用户名=密码，角色</span></span><br><span class="line"><span class="attr">root</span>=<span class="number">123456</span>,teacher</span><br><span class="line"><span class="attr">admin</span>=<span class="number">12345</span>,student</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment">#角色=权限  *表示所有权限</span></span><br><span class="line"><span class="attr">principal</span>=*</span><br><span class="line"><span class="attr">student</span>=achievement-list</span><br><span class="line"><span class="attr">teacher</span>=achievement-add,achievement-del,achievement-list</span><br></pre></td></tr></table></figure><h3 id="3-Shiro的基本使用"><a href="#3-Shiro的基本使用" class="headerlink" title="3.Shiro的基本使用"></a>3.Shiro的基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestShiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建安全管理器</span></span><br><span class="line">        <span class="type">DefaultSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>();</span><br><span class="line">        <span class="comment">//2.创建Realm</span></span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="comment">//3.将Realm设置安全管理器</span></span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line">        <span class="comment">//4.将Realm设置给SecurityUtils工具</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//5.通过SecurityUtils工具类获取subject对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【认证流程】</span></span><br><span class="line">        <span class="comment">//1.将认证账号和密码封装到token对象中</span></span><br><span class="line">        <span class="type">AuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        <span class="comment">//2.通过subject对象调用login方法进行认证申请(登录验证)</span></span><br><span class="line">        <span class="comment">//认证失败抛出IncorrectCredentialsException</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            b = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            b = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(b?<span class="string">&quot;登录成功&quot;</span>:<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【授权】</span></span><br><span class="line">        <span class="comment">//判断是否有某个角色</span></span><br><span class="line">        System.out.println(subject.hasRole(<span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">        <span class="comment">//判断是否有某个权限</span></span><br><span class="line">        System.out.println(subject.isPermitted(<span class="string">&quot;achievement-list&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Shiro认证流程"><a href="#Shiro认证流程" class="headerlink" title="Shiro认证流程"></a>Shiro认证流程</h3><p><img src="/2022/07/06/Shiro-SpringBoot/1655905403869.jpg" alt="1655905403869"></p><h2 id="3、SpringBoot应用整合Shiro"><a href="#3、SpringBoot应用整合Shiro" class="headerlink" title="3、SpringBoot应用整合Shiro"></a>3、SpringBoot应用整合Shiro</h2><h3 id="1-创建SpringBoot，导入依赖"><a href="#1-创建SpringBoot，导入依赖" class="headerlink" title="1.创建SpringBoot，导入依赖"></a>1.创建SpringBoot，导入依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.1</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      url:  jdbc:mysql:<span class="comment">//localhost:3306/shiro</span></span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line">      #Mysql如果是<span class="number">8.</span>X com.mysql.cj.jdbc.Driver</span><br><span class="line">      driver-class-name:  com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mappers/Mybatis-config.xml</span><br><span class="line">  mapper-locations: classpath:mappers<span class="comment">/*Mapper.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.shiro_springboot.bean</span></span><br></pre></td></tr></table></figure><h3 id="3-整合Shiro"><a href="#3-整合Shiro" class="headerlink" title="3.整合Shiro"></a>3.整合Shiro</h3><ul><li>导入依赖</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>Shiro配置<ul><li>SpringBoot默认没有提供对Shiro的自动配置</li><li>Shiro_Config.java</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shiro_springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro_Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IniRealm <span class="title function_">getIniRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:Shiro.ini&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> iniRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(IniRealm iniRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">defaultWebSecurityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//SecurityManager进行效验，需要Realm</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(iniRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器就是Shiro进行权限效验的核心，进行认证和授权是需要SecurityManager的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">filterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        filterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="comment">//设置Shiro的拦截规则</span></span><br><span class="line">        Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//项目的根路径不拦截</span></span><br><span class="line">        <span class="comment">//anon 匿名用户可访问</span></span><br><span class="line">        <span class="comment">//authc 认证用户可访问</span></span><br><span class="line">        <span class="comment">//user 使用RemeberMe的用户可访问</span></span><br><span class="line">        <span class="comment">//perms 对应权限的用户可访问</span></span><br><span class="line">        <span class="comment">//role 对应角色可访问</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//未认证用户访问页面，默认跳转到login.jsp</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterFactoryBean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        <span class="comment">//设置未授权访问的页面路径</span></span><br><span class="line">        filterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        filterFactoryBean.setFilterChainDefinitionMap(hashMap);</span><br><span class="line">        <span class="keyword">return</span> filterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service层</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLogin</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">controler层</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">getIndex</span><span class="params">(String username, String password, ModelAndView modelAndView)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginService.checkLogin(username,password);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;name&quot;</span>,username);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;pass&quot;</span>,password);</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4、SpringBoot应用整合Shiro-案例（JdbcRealm）"><a href="#4、SpringBoot应用整合Shiro-案例（JdbcRealm）" class="headerlink" title="4、SpringBoot应用整合Shiro-案例（JdbcRealm）"></a>4、SpringBoot应用整合Shiro-案例（JdbcRealm）</h2><h3 id="1-JdbcRealm介绍"><a href="#1-JdbcRealm介绍" class="headerlink" title="1.JdbcRealm介绍"></a>1.JdbcRealm介绍</h3><p><img src="/2022/07/06/Shiro-SpringBoot/1656410232753.jpg" alt="1656410232753">如果使用JdbcRealm，这必须提供JdbcRealm所需的表结构（权限设计）</p><h3 id="2-JdbcRealm规定的表结构"><a href="#2-JdbcRealm规定的表结构" class="headerlink" title="2.JdbcRealm规定的表结构"></a>2.JdbcRealm规定的表结构</h3><p>1.用户信息表：users</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.角色信息表：user_roles</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_roles(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.权限信息表：roles_permissions</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> roles_permissions(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    permission <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/07/06/Shiro-SpringBoot/1656412259570.jpg" alt="1656412259570"></p><h3 id="3-SpringBoot整合Shiro"><a href="#3-SpringBoot整合Shiro" class="headerlink" title="3.SpringBoot整合Shiro"></a>3.SpringBoot整合Shiro</h3><ul><li><p>创建SpringBoot应用</p></li><li><p>整合Druid和MyBatis</p></li><li><p>整合Shiro</p><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置Shiro</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JdbcRealm <span class="title function_">getRealm</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="comment">//JdbcRealm会自动从数据库查询用户及权限数据（数据库的表结构要符合JdbcRealm的规范）</span></span><br><span class="line">    <span class="type">JdbcRealm</span> <span class="variable">jdbcRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRealm</span>();</span><br><span class="line">    jdbcRealm.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">//JdbcRealm手动开启授权功能</span></span><br><span class="line">    jdbcRealm.setPermissionsLookupEnabled(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jdbcRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5、Shiro的标签使用"><a href="#5、Shiro的标签使用" class="headerlink" title="5、Shiro的标签使用"></a>5、Shiro的标签使用</h2><blockquote><p>当用户认证进入到主页面之后，需要显示用户信息以及当前用户的权限信息；Shiro提供了一套标签用于在页面来进行权限数据的呈现</p></blockquote><ul><li><p>Shiro提供了可供JSP海洋的标签以及Thymeleaf中的标签</p><ul><li><p>JSP页面中引用：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;shiro&quot;</span> uri=<span class="string">&quot;http://shiro.apache.org/tags&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:tag&gt;&lt;/shiro:tag&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Thymeleaf模板中引用：</p><ul><li><p>在pom.xml中导入thymeleaf模板对Shiro标签支持的依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在Shiro_JdbcRealm配置Shiro的方言支持</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>thymelaef模板中引入Shiro的命名空间</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><ul><li><p>shiro:guest</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--游客访问可以显示，登录状态不显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span>欢迎游客访问<span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:user    shiro:principal</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--游客访问不显示，登录状态显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取登录用户的用户名--&gt;</span></span><br><span class="line">    已登录用户<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:hasRole（判断当前用户的角色）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;shiro:user&gt;</span><br><span class="line">&lt;!--获取登录用户的用户名--&gt;</span><br><span class="line">    已登录用户&lt;shiro:principal/&gt;</span><br><span class="line">    当前用户角色为&lt;shiro:hasRole name=<span class="string">&quot;admin&quot;</span>&gt;管理员&lt;/shiro:hasRole&gt;</span><br><span class="line">                &lt;shiro:hasRole name=<span class="string">&quot;student&quot;</span>&gt;学生&lt;/shiro:hasRole&gt;</span><br><span class="line">                &lt;shiro:hasRole name=<span class="string">&quot;teacher&quot;</span>&gt;老师&lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:hasPression（判断当前用户的权限）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">成绩管理</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:update&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;修改成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:delete&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;删除成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:add&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;添加成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="6、自定义Reaml"><a href="#6、自定义Reaml" class="headerlink" title="6、自定义Reaml"></a>6、自定义Reaml</h2><h3 id="1-自定义数据库"><a href="#1-自定义数据库" class="headerlink" title="1.自定义数据库"></a>1.自定义数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_users(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password_salt <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 角色信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_roles(</span><br><span class="line">role_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">role_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 权限信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_permission(</span><br><span class="line">permission_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">permission_code <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">permission_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 用户角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_users_roles(</span><br><span class="line">uid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY(uid,rid),</span></span><br><span class="line"><span class="comment">-- CONSTRAINT FK_user FOREIGN key(uid) REFERENCES tb_users(id),</span></span><br><span class="line"><span class="comment">-- CONSTRAINT FK_role FOREIGN key(rid) REFERENCES tb_roles(role_id)</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 角色权限表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_roles_permission(</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">pid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-DAO（Mapper）实现"><a href="#2-DAO（Mapper）实现" class="headerlink" title="2.DAO（Mapper）实现"></a>2.DAO（Mapper）实现</h3><ul><li><p>根据用户名查询用户信息，用于认证</p></li><li><select id="queryUserByName" resulttype="user">    select *    from tb_users where username=#{username};</select></li><li><p>根据用户名查询当前用户的角色信息，用于授权</p></li><li><select id="queryRolesByName" resultsets="java.util.Set" resulttype="string">    select role_name from tb_users inner join tb_users_roles    on tb_users.id = tb_users_roles.uid    inner join tb_roles    on tb_users_roles.rid = tb_roles.role_id    where tb_users.username=#{username};</select></li><li><p>根据用户名查询当前用户的权限信息，用于授权</p></li><li><select id="queryPermissionByName" resulttype="string">    select permission_code from tb_users    inner join tb_users_roles    on tb_users.id = tb_users_roles.uid    inner join tb_roles    on tb_users_roles.rid = tb_roles.role_id    inner join tb_roles_permission    on tb_roles_permission.rid = tb_roles.role_id    inner join tb_permission    on tb_permission.permission_id = tb_roles_permission.pid    where tb_users.username=#{username};</select></li></ul><h3 id="3-整合Shiro-1"><a href="#3-整合Shiro-1" class="headerlink" title="3.整合Shiro"></a>3.整合Shiro</h3><ul><li><p>导入依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Shiro配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">factoryBean</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义Realm</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建一个类继承AuthorizingRealm类（实现Realm接口的类）</span></span><br><span class="line"><span class="comment"> * 2.重写doGetAuthorizationInfo和doGetAuthenticationInfo方法</span></span><br><span class="line"><span class="comment"> * 3.重写getName方法,返回当前Realm的一个自定义名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;myRealm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取授权信息（返回当前用户的角色及权限信息）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) principalCollection.iterator().next();</span><br><span class="line">        <span class="comment">//获取当前用户的角色列表</span></span><br><span class="line">        Set&lt;String&gt; roles = userService.queryRolesByName(username);</span><br><span class="line">        <span class="comment">//获取当前用户的权限列表</span></span><br><span class="line">        Set&lt;String&gt;  permission = userService.queryPermissionByName(username);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        info.setRoles(roles);</span><br><span class="line">        info.setStringPermissions(permission);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取认证信息（从数据库查询的用户的正确数据）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//参数AuthenticationToken就是传递的subject.login(token)</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//从token中获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> token.getUsername();</span><br><span class="line">        <span class="comment">//根据用户名从数据库查询当前用户的安全数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="#项目部署"></a>#项目部署</h4><p><img src="/2022/07/06/Shiro-SpringBoot/1656829499875.jpg" alt="1656829499875"></p><h3 id="使用layui整合"><a href="#使用layui整合" class="headerlink" title="使用layui整合"></a>使用layui整合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:shiro=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;/&quot;</span>&gt;&lt;!--从根路径进行获取静态资源--&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;layout 管理系统大布局 - Layui&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-header&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;layout demo&lt;/div&gt;</span><br><span class="line">        &lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 移动端显示 --&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> lay-header-event=<span class="string">&quot;menuLeft&quot;</span>&gt;</span><br><span class="line">                &lt;i class=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">1</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">2</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">3</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;nav groups&lt;/a&gt;</span><br><span class="line">                &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">11</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">22</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">33</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                &lt;/dl&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;layui-nav layui-layout-right&quot;</span>&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide layui-show-md-inline-block&quot;</span>&gt;</span><br><span class="line">                &lt;shiro:guest&gt;&lt;label style=<span class="string">&quot;color: white;text-decoration: underline&quot;</span> onclick=<span class="string">&quot;javascript:location.href=&#x27;login.html&#x27;&quot;</span>&gt;登录&lt;/label&gt;&lt;/shiro:guest&gt;</span><br><span class="line">                &lt;shiro:user&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><br><span class="line">                        &lt;img src=<span class="string">&quot;//tva1.sinaimg.cn/crop.0.0.118.118.180/5db11ff4gw1e77d3nqrv8j203b03cweg.jpg&quot;</span> class=<span class="string">&quot;layui-nav-img&quot;</span>&gt;</span><br><span class="line">                        &lt;shiro:principal/&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Your Profile&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Settings&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Sign out&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/shiro:user&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span> lay-header-event=<span class="string">&quot;menuRight&quot;</span> lay-unselect&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><br><span class="line">                    &lt;i class=<span class="string">&quot;layui-icon layui-icon-more-vertical&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span><br><span class="line">            &lt;ul class=<span class="string">&quot;layui-nav layui-nav-tree&quot;</span> lay-filter=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item layui-nav-itemed&quot;</span>&gt;</span><br><span class="line">                    &lt;a class=<span class="string">&quot;&quot;</span> href=<span class="string">&quot;javascript:;&quot;</span>&gt;menu group <span class="number">1</span>&lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:update&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;修改成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:delete&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;删除成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:add&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;添加成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;menu group <span class="number">2</span>&lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;list <span class="number">1</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;list <span class="number">2</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;超链接&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;click menu item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;the links&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-body&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;padding: 15px;&quot;</span>&gt;内容主体区域。记得修改 layui.css 和 js 的路径&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-footer&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 底部固定区域 --&gt;</span><br><span class="line">        底部固定区域</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;layui/layui.js&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//JS</span></span><br><span class="line">    layui.use([<span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;util&#x27;</span>], function()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">element</span> <span class="operator">=</span> layui.element</span><br><span class="line">            ,layer = layui.layer</span><br><span class="line">            ,util = layui.util</span><br><span class="line">            ,$ = layui.$;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//头部事件</span></span><br><span class="line">        util.event(<span class="string">&#x27;lay-header-event&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">//左侧菜单事件</span></span><br><span class="line">            menuLeft: function(othis)&#123;</span><br><span class="line">                layer.msg(<span class="string">&#x27;展开左侧菜单的操作&#x27;</span>, &#123;icon: <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ,menuRight: function()&#123;</span><br><span class="line">                layer.open(&#123;</span><br><span class="line">                    type: <span class="number">1</span></span><br><span class="line">                    ,content: <span class="string">&#x27;&lt;div style=&quot;padding: 15px;&quot;&gt;处理右侧面板的操作&lt;/div&gt;&#x27;</span></span><br><span class="line">                    ,area: [<span class="string">&#x27;260px&#x27;</span>, <span class="string">&#x27;100%&#x27;</span>]</span><br><span class="line">                    ,offset: <span class="string">&#x27;rt&#x27;</span> <span class="comment">//右上角</span></span><br><span class="line">                    ,anim: <span class="number">5</span></span><br><span class="line">                    ,shadeClose: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-加密"><a href="#7-加密" class="headerlink" title="7.加密"></a>7.加密</h2><blockquote><p>对原有的内容进行对应编码，得到不同于原始内容但能够表示原始内容的数据</p><ul><li>明文———（加密规则）———密文</li><li>加密规则可以自定义，在项目开发中通常使用BASE64和MD5编码方式<ul><li>BASE64：可反编码的编码方式（明文&lt;——&gt;密文）</li><li>MD5：不可逆的编码方式（明文——&gt;密文）</li></ul></li></ul></blockquote><h3 id="7-1-Shiro使用加密认证"><a href="#7-1-Shiro使用加密认证" class="headerlink" title="7.1 Shiro使用加密认证"></a>7.1 Shiro使用加密认证</h3><ul><li><p>配置mather</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">(HashedCredentialsMatcher matcher)</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    加密操作</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">getMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        <span class="comment">//设置加密规则（加密方式）</span></span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="comment">//hash（加密）次数，必须与注册时次数相同</span></span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Controller层，注册使用加密</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">regist</span><span class="params">(User user)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册时对密码进行加密存储（普通加密）</span></span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword());</span><br><span class="line">    System.out.println(md5Hash.toHex());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐加密</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9000</span>)+<span class="number">1000</span>;<span class="comment">//1000~10000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;salt--&quot;</span>+i);</span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword(),Integer.toString(i));</span><br><span class="line">    System.out.println(md5Hash1.toHex());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐加密+多次hash</span></span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword(),Integer.toString(i),<span class="number">3</span>);</span><br><span class="line">    System.out.println(md5Hash2.toHex());</span><br><span class="line"></span><br><span class="line">    user.setPassword(md5Hash2.toHex());</span><br><span class="line">    user.setPassword_salt(Integer.toString(i));</span><br><span class="line">    userService.addUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleHash</span> <span class="variable">simpleHash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;md5&quot;</span>,user.getPassword(),Integer.toString(i),<span class="number">3</span>);</span><br><span class="line">    System.out.println(simpleHash.toHex());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果数据进行了加盐操作，在自定义Realm中</p></li><li><pre><code class="java">/** * 1.创建一个类继承AuthorizingRealm类（实现Realm接口的类） * 2.重写doGetAuthorizationInfo和doGetAuthenticationInfo方法 * 3.重写getName方法,返回当前Realm的一个自定义名称 */public class MyRealm extends AuthorizingRealm &#123;    @Autowired    private UserDao userDao;    @Override    public String getName() &#123;        return &quot;myRealm&quot;;    &#125;    /**     *获取授权信息（返回当前用户的角色及权限信息）     */    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        //获取用户名        String username = (String) principalCollection.iterator().next();        //获取当前用户的角色列表        Set&lt;String&gt; roles = userDao.queryRolesByName(username);        //获取当前用户的权限列表        Set&lt;String&gt;  permission = userDao.queryPermissionByName(username);        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        info.setRoles(roles);        info.setStringPermissions(permission);        return info;    &#125;    /**     * 获取认证信息（从数据库查询的用户的正确数据）     */    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        //参数AuthenticationToken就是传递的subject.login(token)        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;        //从token中获取用户名        String username = token.getUsername();        //根据用户名从数据库查询当前用户的安全数据        User user = userDao.queryUserByName(username);        if(user == null)&#123;            return null;        &#125;        //加盐加密需要加上ByteSource.Util.bytes(user.getPassword_salt())        AuthenticationInfo info = new SimpleAuthenticationInfo(username,user.getPassword(), ByteSource.Util.bytes(user.getPassword_salt()),getName());        return info;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 8.退出登陆</span><br><span class="line"></span><br><span class="line">- 在ShiroConfig中过滤器中配置logout的路径</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  @Bean</span><br><span class="line">  public ShiroFilterFactoryBean factoryBean(DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">      ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">      factoryBean.setSecurityManager(securityManager);</span><br><span class="line">      Map&lt;String, String&gt; map = new HashMap();</span><br><span class="line">      map.put(&quot;/regist&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/login.html&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/**&quot;,&quot;authc&quot;);</span><br><span class="line">  </span><br><span class="line">      map.put(&quot;/logout&quot;,&quot;logout&quot;);</span><br><span class="line">  </span><br><span class="line">      factoryBean.setLoginUrl(&quot;/login.html&quot;);</span><br><span class="line">      factoryBean.setUnauthorizedUrl(&quot;/login.html&quot;);</span><br><span class="line">      factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">      return factoryBean;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>在”退出”按钮加上指定的路径，默认跳转到登陆页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/logout&quot;</span>&gt;退出&lt;/a&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-授权"><a href="#9-授权" class="headerlink" title="9.授权"></a>9.授权</h2><blockquote><p>用户登录之后，要进行响应的操作就需要对应的权限；在操作之前检查权限</p><p>权限控制通常有两类做法：</p><ul><li>不同的用户显示不同的用户菜单</li><li>对所有用户显示所有菜单，当用户点击菜单时验证当前用户是否有此权限</li></ul></blockquote><h4 id="9-1-html授权"><a href="#9-1-html授权" class="headerlink" title="9.1 html授权"></a>9.1 html授权</h4><ul><li><p>只显示当前用户拥有权限的菜单</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-2-过滤器授权"><a href="#9-2-过滤器授权" class="headerlink" title="9.2 过滤器授权"></a>9.2 过滤器授权</h4><ul><li><p>在shiroConfig中过滤器中对请求的url进行权限设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*指定路径访问的权限*/</span></span><br><span class="line">map.put(<span class="string">&quot;/addStu&quot;</span>,<span class="string">&quot;perms[stu:add]&quot;</span>);</span><br><span class="line"><span class="comment">/*未授权访问页面*/</span></span><br><span class="line">factoryBean.setUnauthorizedUrl(<span class="string">&quot;/error&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-3-注解授权"><a href="#9-3-注解授权" class="headerlink" title="9.3 注解授权"></a>9.3 注解授权</h4><ul><li><p>配置Spring对Shior注解的支持</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注解支持*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">autoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    autoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> autoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">attributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    advisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在请求的控制器的方法上添加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delStu&quot;)</span></span><br><span class="line"> <span class="meta">@RequiresPermissions(&quot;stu:delete&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">delStu</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;delStudent&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>通过全局异常处理，指定权限不足时的页面跳转</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobaIExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorizationException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-4-手动授权"><a href="#9-4-手动授权" class="headerlink" title="9.4 手动授权"></a>9.4 手动授权</h4><ul><li><p>在代码中进行手动授权设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.isPermitted(<span class="string">&quot;stu:update&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-缓存使用"><a href="#10-缓存使用" class="headerlink" title="10.缓存使用"></a>10.缓存使用</h2><blockquote><p>使用Shiro进行权限管理过程中，每次进行权限验证时doGetAuthorizationInfo方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成较大的压力</p><p>Shiro支持缓存以降低数据库的访问压力（缓存的是授权信息）</p></blockquote><h4 id="缓存的使用"><a href="#缓存的使用" class="headerlink" title="缓存的使用"></a>缓存的使用</h4><ul><li><p>导入依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//支持缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//第三方缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//shiro使用缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置缓存策略</p><ul><li><p>在resources目录下创建一个xml文件（ehcache.xml）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ehcache updateCheck=<span class="string">&quot;false&quot;</span> dynamicConfig=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">    &lt;!--磁盘存储--&gt;</span><br><span class="line">    &lt;diskStore path=<span class="string">&quot;C:\TEMP&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache name=<span class="string">&quot;users&quot;</span> timeToLiveSeconds=<span class="string">&quot;300&quot;</span> maxEntriesLocalHeap=<span class="string">&quot;1000&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 登录记录缓存锁定<span class="number">1</span>小时 --&gt;</span><br><span class="line">    &lt;defaultCache name=<span class="string">&quot;defaultCache&quot;</span></span><br><span class="line">                  maxElementsInMemory=<span class="string">&quot;10000&quot;</span></span><br><span class="line">                  eternal=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  timeToIdleSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  timeToLiveSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  overflowToDisk=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  maxElementsOnDisk=<span class="string">&quot;100000&quot;</span></span><br><span class="line">                  diskPersistent=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  diskExpiryThreadIntervalSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  memoryStoreEvictionPolicy=<span class="string">&quot;LRU&quot;</span>  &gt;</span><br><span class="line">        &lt;!--缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据，就必然删除一些老的数据</span><br><span class="line">            LRU 最近最少使用</span><br><span class="line">            FIFO 先进先出</span><br><span class="line">            LFU 最少使用--&gt;</span><br><span class="line">    &lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>加入缓存管理（ShiroConfig.java）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> EhCacheManager <span class="title function_">getEhCacheCacheManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">EhCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EhCacheManager</span>();</span><br><span class="line">    cacheManager.setCacheManagerConfigFile(<span class="string">&quot;classpath:ehcache.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> cacheManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="11-session管理"><a href="#11-session管理" class="headerlink" title="11.session管理"></a>11.session管理</h2><blockquote><p>Shiro进行认证和授权是基于session实现的，Shiro包含了对session的管理</p></blockquote><ul><li><p>对session进行管理</p><ul><li>自定义session管理器</li><li>将自定义的session管理器设置给SecurityManager</li></ul></li><li><p>配置自定义sessionManager：ShiroConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSessionManager <span class="title function_">getDefaultWebSessionManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">    <span class="comment">//session默认为30分钟</span></span><br><span class="line">    System.out.println(sessionManager.getGlobalSessionTimeout());</span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">10</span>*<span class="number">1000</span>);<span class="comment">//单位为毫秒</span></span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="12-RememberMe"><a href="#12-RememberMe" class="headerlink" title="12.RememberMe"></a>12.RememberMe</h2><blockquote><p>将用户对页面的访问权限分为三个级别：</p><ul><li>未认证—可访问的页面（如登录页）</li><li><strong>曾认证（记住我）—可访问的页面</strong>（如个人信息页）</li><li>认证—可访问的页面（如转账页面）</li></ul></blockquote><p><img src="/2022/07/06/Shiro-SpringBoot/1656932058129.jpg" alt="1656932058129"></p><ul><li>在过滤器中设置”记住我“可访问的url</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//anon 表示未认证可访问</span></span><br><span class="line"><span class="comment">//user 表示记住我可访问（已认证也可以访问）</span></span><br><span class="line"><span class="comment">//authc 表示已认证可访问</span></span><br><span class="line">map.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/regist&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;user&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在ShiroConfig中配置基于Cookie的rememberMe的管理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CookieRememberMeManager <span class="title function_">getCookieRememberMeManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CookieRememberMeManager</span> <span class="variable">rememberMeManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CookieRememberMeManager</span>();</span><br><span class="line">    <span class="type">SimpleCookie</span> <span class="variable">simpleCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">    rememberMeManager.setCookie(simpleCookie);</span><br><span class="line">    <span class="keyword">return</span> rememberMeManager;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="comment">//设置rememberMe管理器</span></span><br><span class="line">        securityManager.setRememberMeManager(getCookieRememberMeManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端使用</p><ul><li><p>登录页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    记住我<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">getIndex</span><span class="params">(String username, String password, ModelAndView modelAndView,<span class="type">boolean</span> rememberMe)</span>&#123;</span><br><span class="line">       System.out.println(rememberMe);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           loginService.checkLogin(username,password,rememberMe);</span><br><span class="line">           modelAndView.addObject(<span class="string">&quot;name&quot;</span>,username);</span><br><span class="line">           modelAndView.addObject(<span class="string">&quot;pass&quot;</span>,password);</span><br><span class="line">           modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           modelAndView.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> modelAndView;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>业务层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLogin</span><span class="params">(String username,String password,<span class="type">boolean</span> rememberMe)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        token.setRememberMe(rememberMe);</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="13-多Realm配置"><a href="#13-多Realm配置" class="headerlink" title="13.多Realm配置"></a>13.多Realm配置</h2><h4 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h4><ul><li><p>数据来自于不同的数据源时，我们可以给SecurityManager配置多个Realm</p><p><img src="/2022/07/06/Shiro-SpringBoot/1657002814588.jpg" alt="1657002814588"></p></li></ul><h4 id="2、多个Realm的处理方式"><a href="#2、多个Realm的处理方式" class="headerlink" title="2、多个Realm的处理方式"></a>2、多个Realm的处理方式</h4><ul><li><p>链式处理</p><ul><li><p>多个Realm依次进行认证</p></li><li><p>步骤：</p><ul><li><p>第一个MyRealm同上，第二个MyRealm2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm2</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyRealm2.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyRealm2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-------另一个Realm数据源&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//模拟从另一个数据库根据用户名查找的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> token.getUsername();</span><br><span class="line">        <span class="comment">//模拟另一个数据库查找到的信息</span></span><br><span class="line">        <span class="type">SimpleAuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,<span class="string">&quot;test&quot;</span>,getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在ShiroConfig中配置多Realm</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置多个Realm（链式处理）</span></span><br><span class="line">Collection&lt;Realm&gt; realms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">realms.add(myRealm);</span><br><span class="line">realms.add(myRealm2());</span><br><span class="line">securityManager.setRealms(realms);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Shiro认证源码分析</p><p><img src="/2022/07/06/Shiro-SpringBoot/1657007079970.jpg" alt="1657007079970"></p><p><img src="/2022/07/06/Shiro-SpringBoot/1657007122108.jpg" alt="1657007122108"></p></li><li><p>分支处理</p><ul><li><p>根据不同的条件从多个Realm中选择一个进行认证处理</p></li><li><p>实现</p><p><img src="/2022/07/06/Shiro-SpringBoot/1657008240254.jpg" alt="1657008240254"></p></li><li><p>案例：用户不同身份登录执行不同的Realm</p><ul><li><p>自定义Realm（MyRealm和MyRealm2）</p><ul><li>在登录页面选择“普通用户”，则执行MyRealm2的认证</li><li>在登录页面选择“管理员用户”，则执行MyRealm的认证</li></ul></li><li><p>Realm的声明和配置</p></li><li><p>自定义token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyToken</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String loginType;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyToken</span><span class="params">(String username,String password,String loginType)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(username, password);</span><br><span class="line">        <span class="built_in">this</span>.loginType=loginType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLoginType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> loginType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginType</span><span class="params">(String loginType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginType = loginType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义认证器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyModularRealm</span> <span class="keyword">extends</span> <span class="title class_">ModularRealmAuthenticator</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyModularRealm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doAuthenticate</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;------自定义认证器&quot;</span>);</span><br><span class="line">        <span class="type">MyToken</span> <span class="variable">token</span> <span class="operator">=</span> (MyToken) authenticationToken;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginType</span> <span class="operator">=</span> token.getLoginType();</span><br><span class="line">        Collection&lt;Realm&gt; realms = <span class="built_in">this</span>.getRealms();</span><br><span class="line">        Collection&lt;Realm&gt; typeRealms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Realm realm:realms)&#123;</span><br><span class="line">            <span class="keyword">if</span>(realm.getName().startsWith(loginType))&#123;</span><br><span class="line">                typeRealms.add(realm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeRealms.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doSingleRealmAuthentication(typeRealms.iterator().next(), authenticationToken);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doMultiRealmAuthentication(typeRealms, authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置自定义认证器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">(HashedCredentialsMatcher matcher)</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm2 <span class="title function_">myRealm2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyRealm2</span> <span class="variable">myRealm2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm2</span>();</span><br><span class="line">        <span class="keyword">return</span> myRealm2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义认证器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyModularRealm <span class="title function_">myModularRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyModularRealm</span> <span class="variable">myModularRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyModularRealm</span>();</span><br><span class="line">        <span class="keyword">return</span> myModularRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//开启自定义认证器(放在realms设置之前)</span></span><br><span class="line">        securityManager.setAuthenticator(myModularRealm());</span><br><span class="line">        <span class="comment">//配置一个Realm</span></span><br><span class="line"><span class="comment">//        securityManager.setRealm(myRealm);</span></span><br><span class="line">        <span class="comment">//配置多个Realm（链式处理）</span></span><br><span class="line">        Collection&lt;Realm&gt; realms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        realms.add(myRealm);</span><br><span class="line">        realms.add(myRealm2());</span><br><span class="line">        securityManager.setRealms(realms);</span><br><span class="line"></span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="comment">//设置rememberMe管理器</span></span><br><span class="line">        securityManager.setRememberMeManager(getCookieRememberMeManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
