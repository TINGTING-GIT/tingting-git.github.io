<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shiro-SpringBoot</title>
      <link href="/2022/07/06/Shiro-SpringBoot/"/>
      <url>/2022/07/06/Shiro-SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>Shiro</p><h2 id="1-Shiro的工作原理"><a href="#1-Shiro的工作原理" class="headerlink" title="1.Shiro的工作原理"></a>1.Shiro的工作原理</h2><h3 id="1、Shiro的核心功能"><a href="#1、Shiro的核心功能" class="headerlink" title="1、Shiro的核心功能"></a>1、Shiro的核心功能</h3><p>认证（Authentication）：验证用户是否有相应的身份——登录认证；</p><p>授权（Authorization）：即权限验证；对已经通过认证的用户检查是否具有某个权限或者角色，从而控制是否能够进行某种操作；</p><p>会话管理（Session Management）：用户认证成功后创建会话，在没有退出之前，当前用户的所有信息都会保存在这个会话中；可以是普通的JavaSE应用，也可以是web应用；</p><p>加密管理（Cryptography）:对敏感信息进行加密处理；</p><h3 id="2-Shiro的核心组件"><a href="#2-Shiro的核心组件" class="headerlink" title="2.Shiro的核心组件"></a>2.Shiro的核心组件</h3><p><img src="https://bkimg.cdn.bcebos.com/pic/9825bc315c6034a8f93c7d0cce13495408237665?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto" alt="img"></p><p>Shrio三大核心组件：Subject、Security Manager、Realms</p><ul><li>Subject：表示待认证和授权的用户</li><li>Security Manager：他是Shiro框架的核心，Shiro就是通过Security Manager来进行内部实例的管理。并提过他来提供安全管理的各种服务。<ul><li>Authenticator，认证器</li><li>Anthorizer，授权器</li><li>Session Manager，会话管理器</li><li>CacheManager，缓存管理器</li></ul></li><li>Reaim：相当于Shiro进行认证和授权的数据源，充当了Shiro与安全数据之间的桥梁或者连接器。也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro会用应用配置的Realm中查找用户及其权限信息。</li></ul><h2 id="2、使用Shiro"><a href="#2、使用Shiro" class="headerlink" title="2、使用Shiro"></a>2、使用Shiro</h2><h3 id="1-导入Shiro的依赖"><a href="#1-导入Shiro的依赖" class="headerlink" title="1.导入Shiro的依赖"></a>1.导入Shiro的依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2-创建Shiro配置文件"><a href="#2-创建Shiro配置文件" class="headerlink" title="2.创建Shiro配置文件"></a>2.创建Shiro配置文件</h3><p>​在resource目录下创建.ini文件</p><p><img src="/Shiro-SpringBoot%5C1655902064967.png" alt="1655902064967"></p><p>​在文件中误差用户，角色和权限的配置</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment">#用户名=密码，角色</span></span><br><span class="line"><span class="attr">root</span>=<span class="number">123456</span>,teacher</span><br><span class="line"><span class="attr">admin</span>=<span class="number">12345</span>,student</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment">#角色=权限  *表示所有权限</span></span><br><span class="line"><span class="attr">principal</span>=*</span><br><span class="line"><span class="attr">student</span>=achievement-list</span><br><span class="line"><span class="attr">teacher</span>=achievement-add,achievement-del,achievement-list</span><br></pre></td></tr></table></figure><h3 id="3-Shiro的基本使用"><a href="#3-Shiro的基本使用" class="headerlink" title="3.Shiro的基本使用"></a>3.Shiro的基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestShiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建安全管理器</span></span><br><span class="line">        <span class="type">DefaultSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>();</span><br><span class="line">        <span class="comment">//2.创建Realm</span></span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="comment">//3.将Realm设置安全管理器</span></span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line">        <span class="comment">//4.将Realm设置给SecurityUtils工具</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//5.通过SecurityUtils工具类获取subject对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【认证流程】</span></span><br><span class="line">        <span class="comment">//1.将认证账号和密码封装到token对象中</span></span><br><span class="line">        <span class="type">AuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        <span class="comment">//2.通过subject对象调用login方法进行认证申请(登录验证)</span></span><br><span class="line">        <span class="comment">//认证失败抛出IncorrectCredentialsException</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            b = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            b = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(b?<span class="string">&quot;登录成功&quot;</span>:<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【授权】</span></span><br><span class="line">        <span class="comment">//判断是否有某个角色</span></span><br><span class="line">        System.out.println(subject.hasRole(<span class="string">&quot;teacher&quot;</span>));</span><br><span class="line">        <span class="comment">//判断是否有某个权限</span></span><br><span class="line">        System.out.println(subject.isPermitted(<span class="string">&quot;achievement-list&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Shiro认证流程"><a href="#Shiro认证流程" class="headerlink" title="Shiro认证流程"></a>Shiro认证流程</h3><p><img src="/Shiro-SpringBoot%5C1655905403869.png" alt="1655905403869"></p><h2 id="3、SpringBoot应用整合Shiro"><a href="#3、SpringBoot应用整合Shiro" class="headerlink" title="3、SpringBoot应用整合Shiro"></a>3、SpringBoot应用整合Shiro</h2><h3 id="1-创建SpringBoot，导入依赖"><a href="#1-创建SpringBoot，导入依赖" class="headerlink" title="1.创建SpringBoot，导入依赖"></a>1.创建SpringBoot，导入依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.1</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      url:  jdbc:mysql:<span class="comment">//localhost:3306/shiro</span></span><br><span class="line">      username: root</span><br><span class="line">      password: root</span><br><span class="line">      #Mysql如果是<span class="number">8.</span>X com.mysql.cj.jdbc.Driver</span><br><span class="line">      driver-class-name:  com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mappers/Mybatis-config.xml</span><br><span class="line">  mapper-locations: classpath:mappers<span class="comment">/*Mapper.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.example.shiro_springboot.bean</span></span><br></pre></td></tr></table></figure><h3 id="3-整合Shiro"><a href="#3-整合Shiro" class="headerlink" title="3.整合Shiro"></a>3.整合Shiro</h3><ul><li>导入依赖</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>Shiro配置<ul><li>SpringBoot默认没有提供对Shiro的自动配置</li><li>Shiro_Config.java</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shiro_springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro_Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IniRealm <span class="title function_">getIniRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:Shiro.ini&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> iniRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(IniRealm iniRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">defaultWebSecurityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//SecurityManager进行效验，需要Realm</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(iniRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器就是Shiro进行权限效验的核心，进行认证和授权是需要SecurityManager的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">filterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        filterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="comment">//设置Shiro的拦截规则</span></span><br><span class="line">        Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//项目的根路径不拦截</span></span><br><span class="line">        <span class="comment">//anon 匿名用户可访问</span></span><br><span class="line">        <span class="comment">//authc 认证用户可访问</span></span><br><span class="line">        <span class="comment">//user 使用RemeberMe的用户可访问</span></span><br><span class="line">        <span class="comment">//perms 对应权限的用户可访问</span></span><br><span class="line">        <span class="comment">//role 对应角色可访问</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//未认证用户访问页面，默认跳转到login.jsp</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterFactoryBean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        <span class="comment">//设置未授权访问的页面路径</span></span><br><span class="line">        filterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        filterFactoryBean.setFilterChainDefinitionMap(hashMap);</span><br><span class="line">        <span class="keyword">return</span> filterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service层</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLogin</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">controler层</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">getIndex</span><span class="params">(String username, String password, ModelAndView modelAndView)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginService.checkLogin(username,password);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;name&quot;</span>,username);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;pass&quot;</span>,password);</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4、SpringBoot应用整合Shiro-案例（JdbcRealm）"><a href="#4、SpringBoot应用整合Shiro-案例（JdbcRealm）" class="headerlink" title="4、SpringBoot应用整合Shiro-案例（JdbcRealm）"></a>4、SpringBoot应用整合Shiro-案例（JdbcRealm）</h2><h3 id="1-JdbcRealm介绍"><a href="#1-JdbcRealm介绍" class="headerlink" title="1.JdbcRealm介绍"></a>1.JdbcRealm介绍</h3><p><img src="/Shiro-SpringBoot%5C1656410232753.png" alt="1656410232753">如果使用JdbcRealm，这必须提供JdbcRealm所需的表结构（权限设计）</p><h3 id="2-JdbcRealm规定的表结构"><a href="#2-JdbcRealm规定的表结构" class="headerlink" title="2.JdbcRealm规定的表结构"></a>2.JdbcRealm规定的表结构</h3><p>1.用户信息表：users</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.角色信息表：user_roles</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_roles(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.权限信息表：roles_permissions</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> roles_permissions(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    permission <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/Shiro-SpringBoot%5C1656412259570.png" alt="1656412259570"></p><h3 id="3-SpringBoot整合Shiro"><a href="#3-SpringBoot整合Shiro" class="headerlink" title="3.SpringBoot整合Shiro"></a>3.SpringBoot整合Shiro</h3><ul><li><p>创建SpringBoot应用</p></li><li><p>整合Druid和MyBatis</p></li><li><p>整合Shiro</p><ul><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置Shiro</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JdbcRealm <span class="title function_">getRealm</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="comment">//JdbcRealm会自动从数据库查询用户及权限数据（数据库的表结构要符合JdbcRealm的规范）</span></span><br><span class="line">    <span class="type">JdbcRealm</span> <span class="variable">jdbcRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRealm</span>();</span><br><span class="line">    jdbcRealm.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">//JdbcRealm手动开启授权功能</span></span><br><span class="line">    jdbcRealm.setPermissionsLookupEnabled(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jdbcRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5、Shiro的标签使用"><a href="#5、Shiro的标签使用" class="headerlink" title="5、Shiro的标签使用"></a>5、Shiro的标签使用</h2><blockquote><p>当用户认证进入到主页面之后，需要显示用户信息以及当前用户的权限信息；Shiro提供了一套标签用于在页面来进行权限数据的呈现</p></blockquote><ul><li><p>Shiro提供了可供JSP海洋的标签以及Thymeleaf中的标签</p><ul><li><p>JSP页面中引用：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;shiro&quot;</span> uri=<span class="string">&quot;http://shiro.apache.org/tags&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:tag&gt;&lt;/shiro:tag&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Thymeleaf模板中引用：</p><ul><li><p>在pom.xml中导入thymeleaf模板对Shiro标签支持的依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在Shiro_JdbcRealm配置Shiro的方言支持</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>thymelaef模板中引入Shiro的命名空间</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><ul><li><p>shiro:guest</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--游客访问可以显示，登录状态不显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span>欢迎游客访问<span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:user    shiro:principal</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--游客访问不显示，登录状态显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取登录用户的用户名--&gt;</span></span><br><span class="line">    已登录用户<span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:hasRole（判断当前用户的角色）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;shiro:user&gt;</span><br><span class="line">&lt;!--获取登录用户的用户名--&gt;</span><br><span class="line">    已登录用户&lt;shiro:principal/&gt;</span><br><span class="line">    当前用户角色为&lt;shiro:hasRole name=<span class="string">&quot;admin&quot;</span>&gt;管理员&lt;/shiro:hasRole&gt;</span><br><span class="line">                &lt;shiro:hasRole name=<span class="string">&quot;student&quot;</span>&gt;学生&lt;/shiro:hasRole&gt;</span><br><span class="line">                &lt;shiro:hasRole name=<span class="string">&quot;teacher&quot;</span>&gt;老师&lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>shiro:hasPression（判断当前用户的权限）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">成绩管理</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:update&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;修改成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:delete&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;删除成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">    &lt;Li&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:add&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;添加成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/Li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="6、自定义Reaml"><a href="#6、自定义Reaml" class="headerlink" title="6、自定义Reaml"></a>6、自定义Reaml</h2><h3 id="1-自定义数据库"><a href="#1-自定义数据库" class="headerlink" title="1.自定义数据库"></a>1.自定义数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_users(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password_salt <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 角色信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_roles(</span><br><span class="line">role_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">role_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 权限信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_permission(</span><br><span class="line">permission_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">permission_code <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">permission_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 用户角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_users_roles(</span><br><span class="line">uid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY(uid,rid),</span></span><br><span class="line"><span class="comment">-- CONSTRAINT FK_user FOREIGN key(uid) REFERENCES tb_users(id),</span></span><br><span class="line"><span class="comment">-- CONSTRAINT FK_role FOREIGN key(rid) REFERENCES tb_roles(role_id)</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 角色权限表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_roles_permission(</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">pid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-DAO（Mapper）实现"><a href="#2-DAO（Mapper）实现" class="headerlink" title="2.DAO（Mapper）实现"></a>2.DAO（Mapper）实现</h3><ul><li><p>根据用户名查询用户信息，用于认证</p></li><li><select id="queryUserByName" resultType="user">    select *    from tb_users where username=#{username};</select></li><li><p>根据用户名查询当前用户的角色信息，用于授权</p></li><li><select id="queryRolesByName" resultSets="java.util.Set" resultType="string">    select role_name from tb_users inner join tb_users_roles    on tb_users.id = tb_users_roles.uid    inner join tb_roles    on tb_users_roles.rid = tb_roles.role_id    where tb_users.username=#{username};</select></li><li><p>根据用户名查询当前用户的权限信息，用于授权</p></li><li><select id="queryPermissionByName" resultType="string">    select permission_code from tb_users    inner join tb_users_roles    on tb_users.id = tb_users_roles.uid    inner join tb_roles    on tb_users_roles.rid = tb_roles.role_id    inner join tb_roles_permission    on tb_roles_permission.rid = tb_roles.role_id    inner join tb_permission    on tb_permission.permission_id = tb_roles_permission.pid    where tb_users.username=#{username};</select></li></ul><h3 id="3-整合Shiro-1"><a href="#3-整合Shiro-1" class="headerlink" title="3.整合Shiro"></a>3.整合Shiro</h3><ul><li><p>导入依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Shiro配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">factoryBean</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义Realm</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.创建一个类继承AuthorizingRealm类（实现Realm接口的类）</span></span><br><span class="line"><span class="comment"> * 2.重写doGetAuthorizationInfo和doGetAuthenticationInfo方法</span></span><br><span class="line"><span class="comment"> * 3.重写getName方法,返回当前Realm的一个自定义名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;myRealm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取授权信息（返回当前用户的角色及权限信息）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) principalCollection.iterator().next();</span><br><span class="line">        <span class="comment">//获取当前用户的角色列表</span></span><br><span class="line">        Set&lt;String&gt; roles = userService.queryRolesByName(username);</span><br><span class="line">        <span class="comment">//获取当前用户的权限列表</span></span><br><span class="line">        Set&lt;String&gt;  permission = userService.queryPermissionByName(username);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        info.setRoles(roles);</span><br><span class="line">        info.setStringPermissions(permission);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取认证信息（从数据库查询的用户的正确数据）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//参数AuthenticationToken就是传递的subject.login(token)</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//从token中获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> token.getUsername();</span><br><span class="line">        <span class="comment">//根据用户名从数据库查询当前用户的安全数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="#项目部署"></a>#项目部署</h4><p><img src="/Shiro-SpringBoot%5C1656829499875.png" alt="1656829499875"></p><h3 id="使用layui整合"><a href="#使用layui整合" class="headerlink" title="使用layui整合"></a>使用layui整合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:shiro=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;/&quot;</span>&gt;&lt;!--从根路径进行获取静态资源--&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;layout 管理系统大布局 - Layui&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-header&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;layout demo&lt;/div&gt;</span><br><span class="line">        &lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 移动端显示 --&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> lay-header-event=<span class="string">&quot;menuLeft&quot;</span>&gt;</span><br><span class="line">                &lt;i class=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">1</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">2</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;nav <span class="number">3</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;nav groups&lt;/a&gt;</span><br><span class="line">                &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">11</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">22</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;menu <span class="number">33</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                &lt;/dl&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;layui-nav layui-layout-right&quot;</span>&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item layui-hide layui-show-md-inline-block&quot;</span>&gt;</span><br><span class="line">                &lt;shiro:guest&gt;&lt;label style=<span class="string">&quot;color: white;text-decoration: underline&quot;</span> onclick=<span class="string">&quot;javascript:location.href=&#x27;login.html&#x27;&quot;</span>&gt;登录&lt;/label&gt;&lt;/shiro:guest&gt;</span><br><span class="line">                &lt;shiro:user&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><br><span class="line">                        &lt;img src=<span class="string">&quot;//tva1.sinaimg.cn/crop.0.0.118.118.180/5db11ff4gw1e77d3nqrv8j203b03cweg.jpg&quot;</span> class=<span class="string">&quot;layui-nav-img&quot;</span>&gt;</span><br><span class="line">                        &lt;shiro:principal/&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Your Profile&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Settings&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;Sign out&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/shiro:user&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span> lay-header-event=<span class="string">&quot;menuRight&quot;</span> lay-unselect&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><br><span class="line">                    &lt;i class=<span class="string">&quot;layui-icon layui-icon-more-vertical&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span><br><span class="line">            &lt;ul class=<span class="string">&quot;layui-nav layui-nav-tree&quot;</span> lay-filter=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item layui-nav-itemed&quot;</span>&gt;</span><br><span class="line">                    &lt;a class=<span class="string">&quot;&quot;</span> href=<span class="string">&quot;javascript:;&quot;</span>&gt;menu group <span class="number">1</span>&lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:update&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;修改成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:delete&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;删除成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;shiro:hasPermission name=<span class="string">&quot;stu:add&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;添加成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><br><span class="line">                    &lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;menu group <span class="number">2</span>&lt;/a&gt;</span><br><span class="line">                    &lt;dl class=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;list <span class="number">1</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;list <span class="number">2</span>&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                        &lt;dd&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;超链接&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                    &lt;/dl&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span>&gt;click menu item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li class=<span class="string">&quot;layui-nav-item&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;the links&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-body&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;padding: 15px;&quot;</span>&gt;内容主体区域。记得修改 layui.css 和 js 的路径&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-footer&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 底部固定区域 --&gt;</span><br><span class="line">        底部固定区域</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;layui/layui.js&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//JS</span></span><br><span class="line">    layui.use([<span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;util&#x27;</span>], function()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">element</span> <span class="operator">=</span> layui.element</span><br><span class="line">            ,layer = layui.layer</span><br><span class="line">            ,util = layui.util</span><br><span class="line">            ,$ = layui.$;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//头部事件</span></span><br><span class="line">        util.event(<span class="string">&#x27;lay-header-event&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">//左侧菜单事件</span></span><br><span class="line">            menuLeft: function(othis)&#123;</span><br><span class="line">                layer.msg(<span class="string">&#x27;展开左侧菜单的操作&#x27;</span>, &#123;icon: <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ,menuRight: function()&#123;</span><br><span class="line">                layer.open(&#123;</span><br><span class="line">                    type: <span class="number">1</span></span><br><span class="line">                    ,content: <span class="string">&#x27;&lt;div style=&quot;padding: 15px;&quot;&gt;处理右侧面板的操作&lt;/div&gt;&#x27;</span></span><br><span class="line">                    ,area: [<span class="string">&#x27;260px&#x27;</span>, <span class="string">&#x27;100%&#x27;</span>]</span><br><span class="line">                    ,offset: <span class="string">&#x27;rt&#x27;</span> <span class="comment">//右上角</span></span><br><span class="line">                    ,anim: <span class="number">5</span></span><br><span class="line">                    ,shadeClose: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-加密"><a href="#7-加密" class="headerlink" title="7.加密"></a>7.加密</h2><blockquote><p>对原有的内容进行对应编码，得到不同于原始内容但能够表示原始内容的数据</p><ul><li>明文———（加密规则）———密文</li><li>加密规则可以自定义，在项目开发中通常使用BASE64和MD5编码方式<ul><li>BASE64：可反编码的编码方式（明文&lt;——&gt;密文）</li><li>MD5：不可逆的编码方式（明文——&gt;密文）</li></ul></li></ul></blockquote><h3 id="7-1-Shiro使用加密认证"><a href="#7-1-Shiro使用加密认证" class="headerlink" title="7.1 Shiro使用加密认证"></a>7.1 Shiro使用加密认证</h3><ul><li><p>配置mather</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">(HashedCredentialsMatcher matcher)</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    加密操作</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">getMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        <span class="comment">//设置加密规则（加密方式）</span></span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="comment">//hash（加密）次数，必须与注册时次数相同</span></span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Controller层，注册使用加密</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/regist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">regist</span><span class="params">(User user)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册时对密码进行加密存储（普通加密）</span></span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword());</span><br><span class="line">    System.out.println(md5Hash.toHex());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐加密</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9000</span>)+<span class="number">1000</span>;<span class="comment">//1000~10000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;salt--&quot;</span>+i);</span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword(),Integer.toString(i));</span><br><span class="line">    System.out.println(md5Hash1.toHex());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加盐加密+多次hash</span></span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(user.getPassword(),Integer.toString(i),<span class="number">3</span>);</span><br><span class="line">    System.out.println(md5Hash2.toHex());</span><br><span class="line"></span><br><span class="line">    user.setPassword(md5Hash2.toHex());</span><br><span class="line">    user.setPassword_salt(Integer.toString(i));</span><br><span class="line">    userService.addUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleHash</span> <span class="variable">simpleHash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;md5&quot;</span>,user.getPassword(),Integer.toString(i),<span class="number">3</span>);</span><br><span class="line">    System.out.println(simpleHash.toHex());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果数据进行了加盐操作，在自定义Realm中</p></li><li><pre><code class="java">/** * 1.创建一个类继承AuthorizingRealm类（实现Realm接口的类） * 2.重写doGetAuthorizationInfo和doGetAuthenticationInfo方法 * 3.重写getName方法,返回当前Realm的一个自定义名称 */public class MyRealm extends AuthorizingRealm &#123;    @Autowired    private UserDao userDao;    @Override    public String getName() &#123;        return &quot;myRealm&quot;;    &#125;    /**     *获取授权信息（返回当前用户的角色及权限信息）     */    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        //获取用户名        String username = (String) principalCollection.iterator().next();        //获取当前用户的角色列表        Set&lt;String&gt; roles = userDao.queryRolesByName(username);        //获取当前用户的权限列表        Set&lt;String&gt;  permission = userDao.queryPermissionByName(username);        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        info.setRoles(roles);        info.setStringPermissions(permission);        return info;    &#125;    /**     * 获取认证信息（从数据库查询的用户的正确数据）     */    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        //参数AuthenticationToken就是传递的subject.login(token)        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;        //从token中获取用户名        String username = token.getUsername();        //根据用户名从数据库查询当前用户的安全数据        User user = userDao.queryUserByName(username);        if(user == null)&#123;            return null;        &#125;        //加盐加密需要加上ByteSource.Util.bytes(user.getPassword_salt())        AuthenticationInfo info = new SimpleAuthenticationInfo(username,user.getPassword(), ByteSource.Util.bytes(user.getPassword_salt()),getName());        return info;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 8.退出登陆</span><br><span class="line"></span><br><span class="line">- 在ShiroConfig中过滤器中配置logout的路径</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  @Bean</span><br><span class="line">  public ShiroFilterFactoryBean factoryBean(DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">      ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">      factoryBean.setSecurityManager(securityManager);</span><br><span class="line">      Map&lt;String, String&gt; map = new HashMap();</span><br><span class="line">      map.put(&quot;/regist&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/login.html&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">      map.put(&quot;/**&quot;,&quot;authc&quot;);</span><br><span class="line">  </span><br><span class="line">      map.put(&quot;/logout&quot;,&quot;logout&quot;);</span><br><span class="line">  </span><br><span class="line">      factoryBean.setLoginUrl(&quot;/login.html&quot;);</span><br><span class="line">      factoryBean.setUnauthorizedUrl(&quot;/login.html&quot;);</span><br><span class="line">      factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">      return factoryBean;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>在”退出”按钮加上指定的路径，默认跳转到登陆页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/logout&quot;</span>&gt;退出&lt;/a&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-授权"><a href="#9-授权" class="headerlink" title="9.授权"></a>9.授权</h2><blockquote><p>用户登录之后，要进行响应的操作就需要对应的权限；在操作之前检查权限</p><p>权限控制通常有两类做法：</p><ul><li>不同的用户显示不同的用户菜单</li><li>对所有用户显示所有菜单，当用户点击菜单时验证当前用户是否有此权限</li></ul></blockquote><h4 id="9-1-html授权"><a href="#9-1-html授权" class="headerlink" title="9.1 html授权"></a>9.1 html授权</h4><ul><li><p>只显示当前用户拥有权限的菜单</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dd&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">&quot;stu:select&quot;</span>&gt;&lt;a href=<span class="string">&quot;&quot;</span> &gt;查看成绩&lt;/a&gt;&lt;/shiro:hasPermission&gt;</span><br><span class="line">&lt;/dd&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-2-过滤器授权"><a href="#9-2-过滤器授权" class="headerlink" title="9.2 过滤器授权"></a>9.2 过滤器授权</h4><ul><li><p>在shiroConfig中过滤器中对请求的url进行权限设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*指定路径访问的权限*/</span></span><br><span class="line">map.put(<span class="string">&quot;/addStu&quot;</span>,<span class="string">&quot;perms[stu:add]&quot;</span>);</span><br><span class="line"><span class="comment">/*未授权访问页面*/</span></span><br><span class="line">factoryBean.setUnauthorizedUrl(<span class="string">&quot;/error&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-3-注解授权"><a href="#9-3-注解授权" class="headerlink" title="9.3 注解授权"></a>9.3 注解授权</h4><ul><li><p>配置Spring对Shior注解的支持</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注解支持*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">autoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    autoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> autoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">attributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    advisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在请求的控制器的方法上添加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delStu&quot;)</span></span><br><span class="line"> <span class="meta">@RequiresPermissions(&quot;stu:delete&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">delStu</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;delStudent&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>通过全局异常处理，指定权限不足时的页面跳转</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobaIExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorizationException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-4-手动授权"><a href="#9-4-手动授权" class="headerlink" title="9.4 手动授权"></a>9.4 手动授权</h4><ul><li><p>在代码中进行手动授权设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.isPermitted(<span class="string">&quot;stu:update&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-缓存使用"><a href="#10-缓存使用" class="headerlink" title="10.缓存使用"></a>10.缓存使用</h2><blockquote><p>使用Shiro进行权限管理过程中，每次进行权限验证时doGetAuthorizationInfo方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成较大的压力</p><p>Shiro支持缓存以降低数据库的访问压力（缓存的是授权信息）</p></blockquote><h4 id="缓存的使用"><a href="#缓存的使用" class="headerlink" title="缓存的使用"></a>缓存的使用</h4><ul><li><p>导入依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//支持缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//第三方缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//shiro使用缓存</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置缓存策略</p><ul><li><p>在resources目录下创建一个xml文件（ehcache.xml）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ehcache updateCheck=<span class="string">&quot;false&quot;</span> dynamicConfig=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">    &lt;!--磁盘存储--&gt;</span><br><span class="line">    &lt;diskStore path=<span class="string">&quot;C:\TEMP&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache name=<span class="string">&quot;users&quot;</span> timeToLiveSeconds=<span class="string">&quot;300&quot;</span> maxEntriesLocalHeap=<span class="string">&quot;1000&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 登录记录缓存锁定<span class="number">1</span>小时 --&gt;</span><br><span class="line">    &lt;defaultCache name=<span class="string">&quot;defaultCache&quot;</span></span><br><span class="line">                  maxElementsInMemory=<span class="string">&quot;10000&quot;</span></span><br><span class="line">                  eternal=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  timeToIdleSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  timeToLiveSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  overflowToDisk=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  maxElementsOnDisk=<span class="string">&quot;100000&quot;</span></span><br><span class="line">                  diskPersistent=<span class="string">&quot;false&quot;</span></span><br><span class="line">                  diskExpiryThreadIntervalSeconds=<span class="string">&quot;120&quot;</span></span><br><span class="line">                  memoryStoreEvictionPolicy=<span class="string">&quot;LRU&quot;</span>  &gt;</span><br><span class="line">        &lt;!--缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据，就必然删除一些老的数据</span><br><span class="line">            LRU 最近最少使用</span><br><span class="line">            FIFO 先进先出</span><br><span class="line">            LFU 最少使用--&gt;</span><br><span class="line">    &lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>加入缓存管理（ShiroConfig.java）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> EhCacheManager <span class="title function_">getEhCacheCacheManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">EhCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EhCacheManager</span>();</span><br><span class="line">    cacheManager.setCacheManagerConfigFile(<span class="string">&quot;classpath:ehcache.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> cacheManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="11-session管理"><a href="#11-session管理" class="headerlink" title="11.session管理"></a>11.session管理</h2><blockquote><p>Shiro进行认证和授权是基于session实现的，Shiro包含了对session的管理</p></blockquote><ul><li><p>对session进行管理</p><ul><li>自定义session管理器</li><li>将自定义的session管理器设置给SecurityManager</li></ul></li><li><p>配置自定义sessionManager：ShiroConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSessionManager <span class="title function_">getDefaultWebSessionManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">    <span class="comment">//session默认为30分钟</span></span><br><span class="line">    System.out.println(sessionManager.getGlobalSessionTimeout());</span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">10</span>*<span class="number">1000</span>);<span class="comment">//单位为毫秒</span></span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="12-RememberMe"><a href="#12-RememberMe" class="headerlink" title="12.RememberMe"></a>12.RememberMe</h2><blockquote><p>将用户对页面的访问权限分为三个级别：</p><ul><li>未认证—可访问的页面（如登录页）</li><li><strong>曾认证（记住我）—可访问的页面</strong>（如个人信息页）</li><li>认证—可访问的页面（如转账页面）</li></ul></blockquote><p><img src="/Shiro-SpringBoot%5C1656932058129.png" alt="1656932058129"></p><ul><li>在过滤器中设置”记住我“可访问的url</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//anon 表示未认证可访问</span></span><br><span class="line"><span class="comment">//user 表示记住我可访问（已认证也可以访问）</span></span><br><span class="line"><span class="comment">//authc 表示已认证可访问</span></span><br><span class="line">map.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/regist&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;user&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/login.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在ShiroConfig中配置基于Cookie的rememberMe的管理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CookieRememberMeManager <span class="title function_">getCookieRememberMeManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CookieRememberMeManager</span> <span class="variable">rememberMeManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CookieRememberMeManager</span>();</span><br><span class="line">    <span class="type">SimpleCookie</span> <span class="variable">simpleCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">    rememberMeManager.setCookie(simpleCookie);</span><br><span class="line">    <span class="keyword">return</span> rememberMeManager;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myRealm);</span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="comment">//设置rememberMe管理器</span></span><br><span class="line">        securityManager.setRememberMeManager(getCookieRememberMeManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端使用</p><ul><li><p>登录页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    记住我<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">getIndex</span><span class="params">(String username, String password, ModelAndView modelAndView,<span class="type">boolean</span> rememberMe)</span>&#123;</span><br><span class="line">       System.out.println(rememberMe);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           loginService.checkLogin(username,password,rememberMe);</span><br><span class="line">           modelAndView.addObject(<span class="string">&quot;name&quot;</span>,username);</span><br><span class="line">           modelAndView.addObject(<span class="string">&quot;pass&quot;</span>,password);</span><br><span class="line">           modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           modelAndView.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> modelAndView;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>业务层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLogin</span><span class="params">(String username,String password,<span class="type">boolean</span> rememberMe)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        token.setRememberMe(rememberMe);</span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="13-多Realm配置"><a href="#13-多Realm配置" class="headerlink" title="13.多Realm配置"></a>13.多Realm配置</h2><h4 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h4><ul><li><p>数据来自于不同的数据源时，我们可以给SecurityManager配置多个Realm</p><p><img src="/Shiro-SpringBoot%5C1657002814588.png" alt="1657002814588"></p></li></ul><h4 id="2、多个Realm的处理方式"><a href="#2、多个Realm的处理方式" class="headerlink" title="2、多个Realm的处理方式"></a>2、多个Realm的处理方式</h4><ul><li><p>链式处理</p><ul><li><p>多个Realm依次进行认证</p></li><li><p>步骤：</p><ul><li><p>第一个MyRealm同上，第二个MyRealm2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm2</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyRealm2.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyRealm2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-------另一个Realm数据源&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//模拟从另一个数据库根据用户名查找的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> token.getUsername();</span><br><span class="line">        <span class="comment">//模拟另一个数据库查找到的信息</span></span><br><span class="line">        <span class="type">SimpleAuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,<span class="string">&quot;test&quot;</span>,getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在ShiroConfig中配置多Realm</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置多个Realm（链式处理）</span></span><br><span class="line">Collection&lt;Realm&gt; realms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">realms.add(myRealm);</span><br><span class="line">realms.add(myRealm2());</span><br><span class="line">securityManager.setRealms(realms);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Shiro认证源码分析</p><p><img src="/Shiro-SpringBoot%5C1657007079970.png" alt="1657007079970"></p><p><img src="/Shiro-SpringBoot%5C1657007122108.png" alt="1657007122108"></p></li><li><p>分支处理</p><ul><li><p>根据不同的条件从多个Realm中选择一个进行认证处理</p></li><li><p>实现</p><p><img src="/Shiro-SpringBoot%5C1657008240254.png" alt="1657008240254"></p></li><li><p>案例：用户不同身份登录执行不同的Realm</p><ul><li><p>自定义Realm（MyRealm和MyRealm2）</p><ul><li>在登录页面选择“普通用户”，则执行MyRealm2的认证</li><li>在登录页面选择“管理员用户”，则执行MyRealm的认证</li></ul></li><li><p>Realm的声明和配置</p></li><li><p>自定义token</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyToken</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String loginType;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyToken</span><span class="params">(String username,String password,String loginType)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(username, password);</span><br><span class="line">        <span class="built_in">this</span>.loginType=loginType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLoginType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> loginType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginType</span><span class="params">(String loginType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginType = loginType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义认证器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyModularRealm</span> <span class="keyword">extends</span> <span class="title class_">ModularRealmAuthenticator</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyModularRealm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doAuthenticate</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;------自定义认证器&quot;</span>);</span><br><span class="line">        <span class="type">MyToken</span> <span class="variable">token</span> <span class="operator">=</span> (MyToken) authenticationToken;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginType</span> <span class="operator">=</span> token.getLoginType();</span><br><span class="line">        Collection&lt;Realm&gt; realms = <span class="built_in">this</span>.getRealms();</span><br><span class="line">        Collection&lt;Realm&gt; typeRealms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Realm realm:realms)&#123;</span><br><span class="line">            <span class="keyword">if</span>(realm.getName().startsWith(loginType))&#123;</span><br><span class="line">                typeRealms.add(realm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeRealms.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doSingleRealmAuthentication(typeRealms.iterator().next(), authenticationToken);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doMultiRealmAuthentication(typeRealms, authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置自定义认证器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">(HashedCredentialsMatcher matcher)</span>&#123;</span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm2 <span class="title function_">myRealm2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyRealm2</span> <span class="variable">myRealm2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm2</span>();</span><br><span class="line">        <span class="keyword">return</span> myRealm2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义认证器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyModularRealm <span class="title function_">myModularRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyModularRealm</span> <span class="variable">myModularRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyModularRealm</span>();</span><br><span class="line">        <span class="keyword">return</span> myModularRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm myRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//开启自定义认证器(放在realms设置之前)</span></span><br><span class="line">        securityManager.setAuthenticator(myModularRealm());</span><br><span class="line">        <span class="comment">//配置一个Realm</span></span><br><span class="line"><span class="comment">//        securityManager.setRealm(myRealm);</span></span><br><span class="line">        <span class="comment">//配置多个Realm（链式处理）</span></span><br><span class="line">        Collection&lt;Realm&gt; realms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        realms.add(myRealm);</span><br><span class="line">        realms.add(myRealm2());</span><br><span class="line">        securityManager.setRealms(realms);</span><br><span class="line"></span><br><span class="line">        securityManager.setCacheManager(getEhCacheCacheManager());</span><br><span class="line">        securityManager.setSessionManager(getDefaultWebSessionManager());</span><br><span class="line">        <span class="comment">//设置rememberMe管理器</span></span><br><span class="line">        securityManager.setRememberMeManager(getCookieRememberMeManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/06/hello-world/"/>
      <url>/2022/07/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
